Directory structure:
└── joe-hireable-cv-branding-buddy/
    ├── README.md
    ├── components.json
    ├── eslint.config.js
    ├── index.html
    ├── jest.config.mjs
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vite.config.ts
    ├── .env.test
    ├── public/
    │   ├── robots.txt
    │   ├── logos/
    │   └── lovable-uploads/
    ├── src/
    │   ├── App.css
    │   ├── App.tsx
    │   ├── index.css
    │   ├── main.tsx
    │   ├── middleware.ts
    │   ├── vite-env.d.ts
    │   ├── components/
    │   │   ├── ChatEditor.tsx
    │   │   ├── CVPreview.tsx
    │   │   ├── CVSection.tsx
    │   │   ├── EnvDebug.tsx
    │   │   ├── FileUpload.tsx
    │   │   ├── Header.tsx
    │   │   ├── ProtectedRoute.tsx
    │   │   └── ui/
    │   │       ├── accordion.tsx
    │   │       ├── alert-dialog.tsx
    │   │       ├── alert.tsx
    │   │       ├── aspect-ratio.tsx
    │   │       ├── avatar.tsx
    │   │       ├── badge.tsx
    │   │       ├── breadcrumb.tsx
    │   │       ├── button.tsx
    │   │       ├── calendar.tsx
    │   │       ├── card.tsx
    │   │       ├── carousel.tsx
    │   │       ├── chart.tsx
    │   │       ├── checkbox.tsx
    │   │       ├── collapsible.tsx
    │   │       ├── command.tsx
    │   │       ├── context-menu.tsx
    │   │       ├── dialog.tsx
    │   │       ├── drawer.tsx
    │   │       ├── dropdown-menu.tsx
    │   │       ├── form.tsx
    │   │       ├── hover-card.tsx
    │   │       ├── input-otp.tsx
    │   │       ├── input.tsx
    │   │       ├── label.tsx
    │   │       ├── menubar.tsx
    │   │       ├── navigation-menu.tsx
    │   │       ├── pagination.tsx
    │   │       ├── popover.tsx
    │   │       ├── progress.tsx
    │   │       ├── radio-group.tsx
    │   │       ├── resizable.tsx
    │   │       ├── scroll-area.tsx
    │   │       ├── select.tsx
    │   │       ├── separator.tsx
    │   │       ├── sheet.tsx
    │   │       ├── sidebar.tsx
    │   │       ├── skeleton.tsx
    │   │       ├── slider.tsx
    │   │       ├── sonner.tsx
    │   │       ├── switch.tsx
    │   │       ├── table.tsx
    │   │       ├── tabs.tsx
    │   │       ├── textarea.tsx
    │   │       ├── toast.tsx
    │   │       ├── toaster.tsx
    │   │       ├── toggle-group.tsx
    │   │       ├── toggle.tsx
    │   │       ├── tooltip.tsx
    │   │       └── use-toast.ts
    │   ├── contexts/
    │   │   ├── AuthContext.tsx
    │   │   ├── CVContext.tsx
    │   │   ├── RecruiterContext.tsx
    │   │   └── SettingsContext.tsx
    │   ├── hooks/
    │   │   ├── use-mobile.tsx
    │   │   └── use-toast.ts
    │   ├── integrations/
    │   │   └── supabase/
    │   │       ├── client.ts
    │   │       ├── server.ts
    │   │       ├── types.ts
    │   │       ├── __tests__/
    │   │       │   └── test-utils.test.ts
    │   │       ├── auth/
    │   │       │   └── hooks.ts
    │   │       ├── migrations/
    │   │       │   └── 001_create_migrations_table.sql
    │   │       ├── services/
    │   │       │   ├── analysis.ts
    │   │       │   ├── candidates.ts
    │   │       │   ├── chats.ts
    │   │       │   ├── companies.ts
    │   │       │   ├── cvs.ts
    │   │       │   ├── documents.ts
    │   │       │   ├── profiles.ts
    │   │       │   └── storage.ts
    │   │       └── utils/
    │   │           ├── error-handler.ts
    │   │           ├── middleware.ts
    │   │           ├── migrations.ts
    │   │           ├── query-builder.ts
    │   │           ├── storage.ts
    │   │           └── test-utils.ts
    │   ├── lib/
    │   │   ├── utils.ts
    │   │   └── supabase/
    │   │       ├── queryBuilder.ts
    │   │       ├── types.ts
    │   │       └── __tests__/
    │   │           └── queryBuilder.test.ts
    │   ├── pages/
    │   │   ├── History.tsx
    │   │   ├── Index.tsx
    │   │   ├── NotFound.tsx
    │   │   ├── Preview.tsx
    │   │   ├── Profile.tsx
    │   │   ├── Settings.tsx
    │   │   ├── Upload.tsx
    │   │   └── Auth/
    │   │       ├── EmailLogin.tsx
    │   │       ├── ForgotPassword.tsx
    │   │       ├── index.tsx
    │   │       ├── Login.tsx
    │   │       └── SignUp.tsx
    │   ├── services/
    │   │   └── api.ts
    │   ├── test/
    │   │   └── setup.ts
    │   └── types/
    │       └── cv.ts
    └── supabase/
        ├── config.toml
        └── migrations/
            ├── 20250331164650_remote_schema.sql
            ├── 20250331164725_remote_schema.sql
            └── 20250331165002_remote_schema.sql

================================================
FILE: README.md
================================================
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/ad4be12a-a250-4bcb-9d32-a12cbd33a766

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/ad4be12a-a250-4bcb-9d32-a12cbd33a766) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with .

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/ad4be12a-a250-4bcb-9d32-a12cbd33a766) and click on Share -> Publish.

## I want to use a custom domain - is that possible?

We don't support custom domains (yet). If you want to deploy your project under your own domain then we recommend using Netlify. Visit our docs for more details: [Custom domains](https://docs.lovable.dev/tips-tricks/custom-domain/)



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}


================================================
FILE: eslint.config.js
================================================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);



================================================
FILE: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CV Branding Buddy</title>
    <meta name="description" content="CV Branding Buddy - Professional CV Enhancement Tool" />
    <meta name="author" content="CV Branding Buddy" />

    <link rel="icon" type="image/svg+xml" href="/logos/favicon.svg" />
    <link rel="apple-touch-icon" href="/logos/favicon.svg" />

    <meta property="og:title" content="CV Branding Buddy" />
    <meta property="og:description" content="Professional CV Enhancement Tool" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/logos/logo.svg" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@cvbrandingbuddy" />
    <meta name="twitter:image" content="/logos/logo.svg" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: jest.config.mjs
================================================
/** @type {import('ts-jest').JestConfigWithTsJest} */
export default {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  testMatch: ['**/__tests__/**/*.test.ts'],
  transform: {
    '^.+\\.tsx?$': ['ts-jest', {
      useESM: true,
    }],
  },
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  setupFilesAfterEnv: ['<rootDir>/src/test/setup.ts'],
  testEnvironmentOptions: {
    url: 'http://localhost',
  },
}; 


================================================
FILE: package.json
================================================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "cross-env NODE_ENV=test NODE_OPTIONS=--experimental-vm-modules dotenv -e .env.test jest",
    "test:watch": "cross-env NODE_ENV=test NODE_OPTIONS=--experimental-vm-modules dotenv -e .env.test jest --watch"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.49.4",
    "@tanstack/react-query": "^5.56.2",
    "caniuse-lite": "^1.0.30001713",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@testing-library/jest-dom": "^6.6.3",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "cross-env": "^7.0.3",
    "dotenv": "^16.4.7",
    "dotenv-cli": "^8.0.0",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "ts-jest": "^29.3.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}



================================================
FILE: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: tailwind.config.ts
================================================

import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				hireable: {
					primary: '#9333ea', // Purple
					secondary: '#f472b6', // Pink
					light: '#c084fc', // Light purple
					dark: '#6b21a8', // Dark purple
				}
			},
			backgroundImage: {
				'hireable-gradient': 'linear-gradient(to right, #f472b6, #9333ea)',
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'fade-in': {
					'0%': {
						opacity: '0',
						transform: 'translateY(10px)'
					},
					'100%': {
						opacity: '1',
						transform: 'translateY(0)'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.3s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================
FILE: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}



================================================
FILE: tsconfig.json
================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false,
    "esModuleInterop": true,
    "moduleResolution": "node",
    "target": "es2017",
    "module": "esnext",
    "lib": ["es2017", "dom"],
    "types": ["jest", "node"]
  }
}



================================================
FILE: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: vite.config.ts
================================================
import { defineConfig, loadEnv } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ command, mode }) => {
  // Load env file based on `mode` in the current working directory.
  const env = loadEnv(mode, process.cwd(), '')
  
  console.log('Loading Vite config...');
  console.log('Mode:', mode);
  console.log('Command:', command);
  console.log('Environment variables:', {
    VITE_SUPABASE_URL: env.VITE_SUPABASE_URL ? '[EXISTS]' : '[MISSING]',
    VITE_SUPABASE_ANON_KEY: env.VITE_SUPABASE_ANON_KEY ? '[EXISTS]' : '[MISSING]'
  });

  return {
    server: {
      host: true, // Listen on all addresses
      port: 8080,
      strictPort: true,
    },
    plugins: [
      react(),
      mode === 'development' &&
      componentTagger(),
    ].filter(Boolean),
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "./src"),
      },
    }
  };
});



================================================
FILE: .env.test
================================================
VITE_SUPABASE_URL=http://localhost:54321
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0 


================================================
FILE: public/robots.txt
================================================
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /





================================================
FILE: src/App.css
================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



================================================
FILE: src/App.tsx
================================================

import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';

import { CVProvider } from "@/contexts/CVContext";
import { RecruiterProvider } from "@/contexts/RecruiterContext";
import { SettingsProvider } from "@/contexts/SettingsContext";
import { AuthProvider } from "@/contexts/AuthContext";

import ProtectedRoute from "./components/ProtectedRoute";
import UploadPage from "./pages/Upload";
import Preview from "./pages/Preview";
import Profile from "./pages/Profile";
import Settings from "./pages/Settings";
import History from "./pages/History";
import NotFound from "./pages/NotFound";

// Auth pages
import AuthLayout from "./pages/Auth";
import Login from "./pages/Auth/Login";
import EmailLogin from "./pages/Auth/EmailLogin";
import SignUp from "./pages/Auth/SignUp";
import ForgotPassword from "./pages/Auth/ForgotPassword";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <AuthProvider>
      <CVProvider>
        <RecruiterProvider>
          <SettingsProvider>
            <TooltipProvider>
              <DndProvider backend={HTML5Backend}>
                <Toaster />
                <Sonner />
                <BrowserRouter>
                  <Routes>
                    {/* Auth routes */}
                    <Route path="/auth" element={<AuthLayout />}>
                      <Route path="login" element={<Login />} />
                      <Route path="email" element={<EmailLogin />} />
                      <Route path="signup" element={<SignUp />} />
                      <Route path="forgot-password" element={<ForgotPassword />} />
                    </Route>
                    
                    {/* Protected routes */}
                    <Route path="/" element={
                      <ProtectedRoute>
                        <UploadPage />
                      </ProtectedRoute>
                    } />
                    <Route path="/preview" element={
                      <ProtectedRoute>
                        <Preview />
                      </ProtectedRoute>
                    } />
                    <Route path="/profile" element={
                      <ProtectedRoute>
                        <Profile />
                      </ProtectedRoute>
                    } />
                    <Route path="/settings" element={
                      <ProtectedRoute>
                        <Settings />
                      </ProtectedRoute>
                    } />
                    <Route path="/history" element={
                      <ProtectedRoute>
                        <History />
                      </ProtectedRoute>
                    } />
                    
                    {/* Fallback route */}
                    <Route path="*" element={<NotFound />} />
                  </Routes>
                </BrowserRouter>
              </DndProvider>
            </TooltipProvider>
          </SettingsProvider>
        </RecruiterProvider>
      </CVProvider>
    </AuthProvider>
  </QueryClientProvider>
);

export default App;



================================================
FILE: src/index.css
================================================

@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
 
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
 
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
 
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
 
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
 
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
 
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
 
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
 
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
 
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
 
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
 
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Custom Hireable gradient for branding elements */
.bg-hireable-gradient {
  background: linear-gradient(135deg, #FF00FF 0%, #6A5ACD 100%);
}



================================================
FILE: src/main.tsx
================================================
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

const rootElement = document.getElementById("root");
if (!rootElement) {
  throw new Error("Failed to find the root element");
}

try {
  console.log('Initializing React app...');
  const root = createRoot(rootElement);
  root.render(
    <App />
  );
  console.log('React app initialized successfully');
} catch (error) {
  console.error('Failed to initialize React app:', error);
}



================================================
FILE: src/middleware.ts
================================================
import { createClient } from '@supabase/supabase-js'

declare const __VITE_SUPABASE_URL__: string
declare const __VITE_SUPABASE_ANON_KEY__: string

const supabaseUrl = __VITE_SUPABASE_URL__
const supabaseAnonKey = __VITE_SUPABASE_ANON_KEY__

console.log('Supabase URL:', supabaseUrl)
console.log('Supabase Key:', supabaseAnonKey ? '[EXISTS]' : '[MISSING]')

// Create a Supabase client for auth checks
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Missing Supabase environment variables')
  throw new Error('Missing Supabase environment variables')
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Protected routes that require authentication
const protectedRoutes = ['/dashboard', '/candidates', '/settings']
const authRoutes = ['/login', '/signup', '/forgot-password']

// Function to check if a path is protected
export function isProtectedRoute(path: string): boolean {
  return protectedRoutes.some(route => path.startsWith(route))
}

// Function to check if a path is an auth route
export function isAuthRoute(path: string): boolean {
  return authRoutes.some(route => path.startsWith(route))
}

// Function to check authentication status
export async function checkAuth() {
  const { data: { session } } = await supabase.auth.getSession()
  return session
}

// Function to handle protected route access
export async function handleProtectedRoute(path: string) {
  const session = await checkAuth()
  
  if (isProtectedRoute(path) && !session) {
    // Redirect to login if accessing protected route without session
    window.location.href = `/login?redirectedFrom=${encodeURIComponent(path)}`
    return false
  }

  if (isAuthRoute(path) && session) {
    // Redirect to dashboard if accessing auth route with active session
    window.location.href = '/dashboard'
    return false
  }

  return true
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public).*)',
  ],
} 


================================================
FILE: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: src/components/ChatEditor.tsx
================================================

import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Send, User, Bot, X } from 'lucide-react';
import { useCVContext } from '@/contexts/CVContext';
import { cn } from '@/lib/utils';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
}

const ChatEditor: React.FC<{ onClose: () => void }> = ({ onClose }) => {
  const [inputValue, setInputValue] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: "Hello! I can help you edit specific parts of the CV. For example, you can ask me to 'Change the headline to Senior Software Engineer' or 'Add Python to the skills section with Expert proficiency'.",
      sender: 'assistant',
      timestamp: new Date(),
    },
  ]);
  const [isProcessing, setIsProcessing] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { cv, updateCvField } = useCVContext();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isProcessing) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputValue('');
    setIsProcessing(true);

    // In a real implementation, we would send the message to a backend API
    // and receive a response. Here we'll simulate it with a timeout.
    setTimeout(() => {
      // Parse the user message to extract intent and target field
      handleUserRequest(userMessage.content);
      setIsProcessing(false);
    }, 1500);
  };

  const handleUserRequest = (request: string) => {
    // This is a simplified implementation to demonstrate the concept
    // In a real app, you'd use more sophisticated NLP to understand the request
    
    // Sample handling for headline changes
    if (request.toLowerCase().includes('headline') || request.toLowerCase().includes('title')) {
      const match = request.match(/change\s+the\s+headline\s+to\s+(.+)/i) || 
                    request.match(/set\s+the\s+headline\s+to\s+(.+)/i) ||
                    request.match(/update\s+the\s+headline\s+to\s+(.+)/i);
      
      if (match && match[1]) {
        const newHeadline = match[1].trim();
        updateCvField('headline', newHeadline);
        
        const response: Message = {
          id: Date.now().toString(),
          content: `I've updated the headline to: "${newHeadline}"`,
          sender: 'assistant',
          timestamp: new Date(),
        };
        
        setMessages((prev) => [...prev, response]);
        return;
      }
    }
    
    // Sample handling for skill additions
    if (request.toLowerCase().includes('skill')) {
      const addMatch = request.match(/add\s+(\w+)\s+to\s+(?:the\s+)?skills?\s+(?:with\s+)?(?:proficiency\s+)?(?:of\s+)?(\w+)?/i);
      
      if (addMatch && addMatch[1]) {
        const skillName = addMatch[1].trim();
        const proficiency = addMatch[2] ? addMatch[2].trim() : 'Intermediate';
        
        // Validate proficiency level
        const validProficiencies = ['Beginner', 'Average', 'Intermediate', 'Advanced', 'Expert'];
        const normalizedProficiency = validProficiencies.find(
          p => p.toLowerCase() === proficiency.toLowerCase()
        ) || 'Intermediate';
        
        // Add the skill
        if (cv) {
          const updatedSkills = [...(cv.skills || []), {
            name: skillName,
            proficiency: normalizedProficiency as any,
            skillType: 'hard'
          }];
          
          updateCvField('skills', updatedSkills);
          
          const response: Message = {
            id: Date.now().toString(),
            content: `I've added ${skillName} with ${normalizedProficiency} proficiency to the skills section.`,
            sender: 'assistant',
            timestamp: new Date(),
          };
          
          setMessages((prev) => [...prev, response]);
          return;
        }
      }
    }
    
    // If no patterns matched, provide a generic response
    const response: Message = {
      id: Date.now().toString(),
      content: "I'm not sure how to help with that specific request. Try asking me to change a specific field like 'Change the headline to...' or 'Add a skill...'",
      sender: 'assistant',
      timestamp: new Date(),
    };
    
    setMessages((prev) => [...prev, response]);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <Card className="w-full h-[400px] max-h-[80vh] flex flex-col shadow-lg">
      <div className="flex items-center justify-between p-3 border-b">
        <h3 className="font-medium">Edit with Chat</h3>
        <Button variant="ghost" size="sm" onClick={onClose}>
          <X className="h-4 w-4" />
        </Button>
      </div>
      
      <CardContent className="flex-1 overflow-y-auto p-3">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={cn(
                "flex items-start gap-2 p-2 rounded-lg",
                message.sender === 'user' ? "bg-gray-100 ml-auto max-w-[80%]" : "bg-purple-50 mr-auto max-w-[80%]"
              )}
            >
              <div className={cn(
                "rounded-full p-1 w-6 h-6 flex items-center justify-center",
                message.sender === 'user' ? "bg-gray-300" : "bg-hireable-primary"
              )}>
                {message.sender === 'user' ? (
                  <User className="h-4 w-4 text-white" />
                ) : (
                  <Bot className="h-4 w-4 text-white" />
                )}
              </div>
              <div className="text-sm">
                {message.content}
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>
      </CardContent>
      
      <div className="p-3 border-t">
        <div className="flex items-center gap-2">
          <Input
            placeholder="Type your edit request..."
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={isProcessing}
            className="flex-1"
          />
          <Button 
            size="icon" 
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isProcessing}
            className="bg-hireable-gradient hover:opacity-90"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="text-xs text-gray-500 mt-2">
          Example: "Change the headline to Senior Developer" or "Add Python to skills with Expert proficiency"
        </div>
      </div>
    </Card>
  );
};

export default ChatEditor;



================================================
FILE: src/components/CVPreview.tsx
================================================
import React from 'react';
import { CV, CVSectionVisibility } from '@/types/cv';
import { Badge } from '@/components/ui/badge';

interface CVPreviewProps {
  cv: CV;
  isAnonymized: boolean;
  sectionVisibility: CVSectionVisibility;
  sectionOrder: string[];
}

const CVPreview: React.FC<CVPreviewProps> = ({ 
  cv, 
  isAnonymized, 
  sectionVisibility,
  sectionOrder 
}) => {
  const formatDate = (dateString: string | null) => {
    if (!dateString) return '';
    
    // If it's just a year
    if (dateString.length === 4) return dateString;
    
    // If it's YYYY-MM
    if (dateString.includes('-')) {
      const [year, month] = dateString.split('-');
      const date = new Date(parseInt(year), parseInt(month) - 1);
      return date.toLocaleDateString('en-GB', { month: 'short', year: 'numeric' });
    }
    
    return dateString;
  };
  
  const renderContactInfo = () => {
    if (isAnonymized) {
      return (
        <div className="text-gray-500 text-sm">
          <p>[Anonymized Contact Information]</p>
        </div>
      );
    }
    
    return (
      <div className="text-gray-500 text-sm">
        {cv.email && <p>{cv.email}</p>}
        {cv.phone && <p>{cv.phone}</p>}
        {cv.location && (
          <p>
            {[cv.location.city, cv.location.country]
              .filter(Boolean)
              .join(', ')}
          </p>
        )}
        {cv.links && cv.links.length > 0 && (
          <div className="flex flex-wrap gap-2 mt-1">
            {cv.links.map((link, index) => (
              <a
                key={index}
                href={link.url || '#'}
                target="_blank"
                rel="noopener noreferrer"
                className="text-hireable-primary hover:underline"
              >
                {link.title || link.url}
              </a>
            ))}
          </div>
        )}
      </div>
    );
  };

  const renderSection = (sectionKey: string) => {
    if (!sectionVisibility[sectionKey as keyof CVSectionVisibility]) {
      return null;
    }

    switch (sectionKey) {
      case 'personalInfo':
        return (
          <div key={sectionKey} className="mb-6">
            <h1 className="text-2xl font-bold text-gray-900">
              {isAnonymized ? '[Anonymized Name]' : `${cv.firstName || ''} ${cv.surname || ''}`}
            </h1>
            <h2 className="text-xl text-gray-700">{cv.headline}</h2>
            {renderContactInfo()}
          </div>
        );
      
      case 'profileStatement':
        return cv.profileStatement ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-2">Professional Summary</h3>
            <p className="text-gray-600">{cv.profileStatement}</p>
          </div>
        ) : null;
      
      case 'skills':
        return cv.skills && cv.skills.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Skills</h3>
            <div className="flex flex-wrap gap-2">
              {cv.skills.map((skill, index) => (
                <Badge 
                  key={index} 
                  variant={skill.skillType === 'hard' ? 'default' : 'outline'}
                  className={skill.skillType === 'hard' ? 'bg-hireable-primary hover:bg-hireable-dark' : ''}
                >
                  {skill.name} {skill.proficiency && `• ${skill.proficiency}`}
                </Badge>
              ))}
            </div>
          </div>
        ) : null;
      
      case 'experience':
        return cv.experience && cv.experience.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Work Experience</h3>
            {cv.experience.map((exp, index) => (
              <div key={index} className="mb-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-medium text-gray-800">{exp.title}</h4>
                    <p className="text-gray-600">{isAnonymized ? '[Confidential]' : exp.company}</p>
                  </div>
                  <p className="text-sm text-gray-500">
                    {formatDate(exp.start)} - {exp.current ? 'Present' : formatDate(exp.end)}
                  </p>
                </div>
                {exp.summary && <p className="text-gray-600 mt-1">{exp.summary}</p>}
                {exp.highlights && exp.highlights.length > 0 && (
                  <ul className="list-disc pl-5 mt-2 text-gray-600">
                    {exp.highlights.map((highlight, idx) => (
                      <li key={idx}>{highlight}</li>
                    ))}
                  </ul>
                )}
              </div>
            ))}
          </div>
        ) : null;
      
      case 'achievements':
        return cv.achievements && cv.achievements.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Key Achievements</h3>
            <ul className="list-disc pl-5 text-gray-600">
              {cv.achievements.map((achievement, index) => (
                <li key={index}>{achievement}</li>
              ))}
            </ul>
          </div>
        ) : null;
      
      case 'education':
        return cv.education && cv.education.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Education</h3>
            {cv.education.map((edu, index) => (
              <div key={index} className="mb-3">
                <h4 className="font-medium text-gray-800">{isAnonymized ? '[Confidential]' : edu.institution}</h4>
                {edu.location && !isAnonymized && (
                  <p className="text-gray-500 text-sm">
                    {[edu.location.city, edu.location.country]
                      .filter(Boolean)
                      .join(', ')}
                  </p>
                )}
                {isAnonymized && edu.location && (
                  <p className="text-gray-500 text-sm">[Anonymized Location]</p>
                )}
                {edu.qualifications && edu.qualifications.map((qual, idx) => (
                  <div key={idx} className="mt-1">
                    <p className="text-gray-700">
                      {qual.qualification} in {qual.course}
                      {qual.grade && ` • ${qual.grade}`}
                    </p>
                    {qual.start && (
                      <p className="text-sm text-gray-500">
                        {formatDate(qual.start)} - {formatDate(qual.end)}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            ))}
          </div>
        ) : null;
      
      case 'languages':
        return cv.languages && cv.languages.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Languages</h3>
            <div className="flex flex-wrap gap-3">
              {cv.languages.map((lang, index) => (
                <p key={index} className="text-gray-600">
                  {lang.name} {lang.level && `• ${lang.level}`}
                </p>
              ))}
            </div>
          </div>
        ) : null;
      
      case 'certifications':
        return cv.certifications && cv.certifications.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Certifications</h3>
            {cv.certifications.map((cert, index) => (
              <div key={index} className="mb-2">
                <p className="text-gray-700 font-medium">{cert.name}</p>
                <p className="text-sm text-gray-500">
                  {cert.issuer && isAnonymized ? '[Confidential]' : cert.issuer}
                  {cert.issuer && ` • `}
                  {cert.date && formatDate(cert.date)}
                </p>
              </div>
            ))}
          </div>
        ) : null;
      
      case 'publications':
        return cv.publications && cv.publications.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Publications</h3>
            {cv.publications.map((pub, index) => (
              <div key={index} className="mb-2">
                <p className="text-gray-700">
                  {pub.pubType && `[${pub.pubType}] `}
                  {pub.title}
                </p>
                {pub.date && <p className="text-sm text-gray-500">{formatDate(pub.date)}</p>}
              </div>
            ))}
          </div>
        ) : null;
      
      case 'professionalMemberships':
        return cv.professionalMemberships && cv.professionalMemberships.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Professional Memberships</h3>
            {cv.professionalMemberships.map((mem, index) => (
              <p key={index} className="text-gray-700 mb-1">
                {mem.name}, {isAnonymized ? '[Confidential]' : mem.institution}
              </p>
            ))}
          </div>
        ) : null;
      
      case 'additionalDetails':
        return cv.addDetails && cv.addDetails.length > 0 ? (
          <div key={sectionKey} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">Additional Information</h3>
            <ul className="list-disc pl-5 text-gray-600">
              {cv.addDetails.map((detail, index) => (
                <li key={index}>{detail}</li>
              ))}
            </ul>
          </div>
        ) : null;
      
      default:
        return null;
    }
  };

  return (
    <div className="max-w-2xl mx-auto bg-white p-6 shadow-sm">
      {sectionOrder.map(renderSection)}
    </div>
  );
};

export default CVPreview;



================================================
FILE: src/components/CVSection.tsx
================================================

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Eye, EyeOff, Edit, GripVertical } from 'lucide-react';
import { useDrag, useDrop } from 'react-dnd';

interface CVSectionProps {
  id: string;
  title: string;
  children: React.ReactNode;
  isVisible: boolean;
  onVisibilityToggle: () => void;
  onEdit?: () => void;
  onOptimize?: () => void;
  isOptimizing?: boolean;
  index: number;
  moveSection: (dragIndex: number, hoverIndex: number) => void;
}

interface DragItem {
  index: number;
  id: string;
  type: string;
}

const CVSection: React.FC<CVSectionProps> = ({
  id,
  title,
  children,
  isVisible,
  onVisibilityToggle,
  onEdit,
  onOptimize,
  isOptimizing = false,
  index,
  moveSection,
}) => {
  const [isHovered, setIsHovered] = useState(false);

  const ref = React.useRef<HTMLDivElement>(null);
  
  const [{ handlerId }, drop] = useDrop({
    accept: 'cv-section',
    collect(monitor) {
      return {
        handlerId: monitor.getHandlerId(),
      };
    },
    hover(item: DragItem, monitor) {
      if (!ref.current) {
        return;
      }
      const dragIndex = item.index;
      const hoverIndex = index;

      // Don't replace items with themselves
      if (dragIndex === hoverIndex) {
        return;
      }

      // Determine rectangle on screen
      const hoverBoundingRect = ref.current?.getBoundingClientRect();

      // Get vertical middle
      const hoverMiddleY =
        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

      // Determine mouse position
      const clientOffset = monitor.getClientOffset();

      // Get pixels to the top
      const hoverClientY = clientOffset!.y - hoverBoundingRect.top;

      // Only perform the move when the mouse has crossed half of the items height
      // When dragging downwards, only move when the cursor is below 50%
      // When dragging upwards, only move when the cursor is above 50%

      // Dragging downwards
      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
        return;
      }

      // Dragging upwards
      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
        return;
      }

      // Time to actually perform the action
      moveSection(dragIndex, hoverIndex);

      // Note: we're mutating the monitor item here!
      // Generally it's better to avoid mutations,
      // but it's good here for the sake of performance
      // to avoid expensive index searches.
      item.index = hoverIndex;
    },
  });

  const [{ isDragging }, drag] = useDrag({
    type: 'cv-section',
    item: () => {
      return { id, index };
    },
    collect: (monitor: any) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  drag(drop(ref));

  return (
    <div
      ref={ref}
      className={`mb-4 border rounded-md ${isVisible ? '' : 'opacity-50'} 
        ${isDragging ? 'opacity-40' : ''}
        transition-all duration-200`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      data-handler-id={handlerId}
    >
      <div className="flex items-center border-b px-4 py-3 bg-gray-50">
        <div className="cursor-move px-1 mr-2">
          <GripVertical className="h-5 w-5 text-gray-400" />
        </div>
        <h3 className="text-sm font-medium flex-1">{title}</h3>
        <div className="flex space-x-2">
          {onOptimize && (
            <Button
              variant="outline"
              size="sm"
              className="text-xs"
              onClick={onOptimize}
              disabled={isOptimizing}
            >
              {isOptimizing ? 'Optimizing...' : 'Optimize with AI'}
            </Button>
          )}
          {onEdit && (
            <Button
              variant="ghost"
              size="sm"
              onClick={onEdit}
              className="text-gray-500 hover:text-gray-700"
            >
              <Edit className="h-4 w-4" />
            </Button>
          )}
          <Button
            variant="ghost"
            size="sm"
            onClick={onVisibilityToggle}
            className="text-gray-500 hover:text-gray-700"
          >
            {isVisible ? (
              <Eye className="h-4 w-4" />
            ) : (
              <EyeOff className="h-4 w-4" />
            )}
          </Button>
        </div>
      </div>
      {isVisible && <div className="p-4">{children}</div>}
    </div>
  );
};

export default CVSection;



================================================
FILE: src/components/EnvDebug.tsx
================================================
import { useEffect } from 'react'

export function EnvDebug() {
  useEffect(() => {
    console.log('Environment variables in component:', {
      VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL ? '[EXISTS]' : '[MISSING]',
      VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? '[EXISTS]' : '[MISSING]'
    })
  }, [])

  return (
    <div style={{ padding: '20px', background: '#f5f5f5', margin: '20px', borderRadius: '4px' }}>
      <h3>Environment Variables Debug</h3>
      <pre>
        {JSON.stringify({
          VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL ? '[EXISTS]' : '[MISSING]',
          VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? '[EXISTS]' : '[MISSING]'
        }, null, 2)}
      </pre>
    </div>
  )
} 


================================================
FILE: src/components/FileUpload.tsx
================================================

import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Upload, FileText } from 'lucide-react';
import { toast } from '@/components/ui/use-toast';

interface FileUploadProps {
  onFileSelected: (file: File) => void;
  label?: string;
  accept?: string;
  maxSize?: number; // in MB
  isLoading?: boolean;
}

const FileUpload: React.FC<FileUploadProps> = ({
  onFileSelected,
  label = 'Upload file',
  accept = '.pdf,.doc,.docx',
  maxSize = 10, // Default 10MB
  isLoading = false,
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const [file, setFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (!isLoading) setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (!isLoading) setIsDragging(true);
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);
    
    if (isLoading) return;
    
    const files = e.dataTransfer.files;
    handleFiles(files);
  };

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (isLoading) return;
    const files = e.target.files;
    if (files) handleFiles(files);
  };

  const handleFiles = (files: FileList) => {
    if (files.length === 0) return;
    
    const selectedFile = files[0];
    const fileSizeMB = selectedFile.size / (1024 * 1024);
    
    if (fileSizeMB > maxSize) {
      toast({
        title: "File too large",
        description: `Maximum file size is ${maxSize}MB.`,
        variant: "destructive",
      });
      return;
    }
    
    // Check file type
    const fileType = selectedFile.name.split('.').pop()?.toLowerCase();
    const acceptableTypes = accept.split(',').map(type => type.replace('.', '').toLowerCase());
    
    if (fileType && !acceptableTypes.includes(fileType)) {
      toast({
        title: "Invalid file type",
        description: `Please upload a file of type: ${accept}`,
        variant: "destructive",
      });
      return;
    }
    
    setFile(selectedFile);
    onFileSelected(selectedFile);
  };

  const handleBrowseClick = () => {
    if (!isLoading && fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div
      className={`border-2 border-dashed rounded-md p-6 text-center transition-all ${
        isDragging ? 'border-hireable-primary bg-purple-50' : 'border-gray-300'
      } ${isLoading ? 'opacity-70 cursor-not-allowed' : 'cursor-pointer'}`}
      onDragEnter={handleDragEnter}
      onDragLeave={handleDragLeave}
      onDragOver={handleDragOver}
      onDrop={handleDrop}
      onClick={handleBrowseClick}
    >
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileInput}
        accept={accept}
        className="hidden"
        disabled={isLoading}
      />
      
      <div className="flex flex-col items-center justify-center gap-2">
        {file ? (
          <>
            <FileText className="h-12 w-12 text-hireable-primary mb-2" />
            <p className="text-sm font-medium text-gray-700">{file.name}</p>
            <p className="text-xs text-gray-500">
              {(file.size / (1024 * 1024)).toFixed(2)} MB
            </p>
          </>
        ) : (
          <>
            <div className="bg-purple-100 rounded-full p-3 mb-2">
              <Upload className="h-6 w-6 text-hireable-primary" />
            </div>
            <p className="text-sm font-medium text-gray-700">
              Drag and drop your file here, or
            </p>
            <Button 
              variant="outline" 
              size="sm" 
              className="mt-2 text-hireable-primary border-hireable-primary hover:bg-purple-50"
              disabled={isLoading}
              type="button"
            >
              Browse Files
            </Button>
            <p className="text-xs text-gray-500 mt-2">
              Supported formats: {accept} (Max size: {maxSize}MB)
            </p>
          </>
        )}
      </div>
    </div>
  );
};

export default FileUpload;



================================================
FILE: src/components/Header.tsx
================================================
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useRecruiterContext } from '@/contexts/RecruiterContext';
import { useAuth } from '@/contexts/AuthContext';

const Header: React.FC = () => {
  const location = useLocation();
  const { profile } = useRecruiterContext();
  const { user, signOut } = useAuth();

  const getInitials = () => {
    if (!profile) return 'U';
    return `${profile.firstName.charAt(0)}${profile.lastName.charAt(0)}`;
  };

  const handleSignOut = async () => {
    try {
      await signOut();
      // Navigation will be handled by the auth state change listener
    } catch (error) {
      console.error('Sign out failed:', error);
    }
  };

  return (
    <header className="bg-white border-b border-gray-200">
      <div className="container mx-auto px-4 py-2 flex justify-between items-center">
        <div className="flex items-center">
          <Link to="/" className="flex items-center">
            <img 
              src="/logos/logo.svg" 
              alt="CV Branding Buddy"
              className="h-8 w-auto"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                console.error('Logo failed to load:', target.src);
                target.onerror = null; // Prevent infinite loop
                target.style.display = 'none';
                // Fallback to text
                const parent = target.parentElement;
                if (parent) {
                  const textFallback = document.createElement('span');
                  textFallback.className = 'text-xl font-semibold';
                  textFallback.textContent = 'CV Branding Buddy';
                  parent.appendChild(textFallback);
                }
              }}
            />
          </Link>
        </div>
        
        <div className="flex items-center space-x-4">
          {location.pathname !== '/settings' && (
            <Link to="/settings">
              <Button variant="ghost" size="sm">
                Settings
              </Button>
            </Link>
          )}
          
          {location.pathname !== '/history' && (
            <Link to="/history">
              <Button variant="ghost" size="sm">
                History
              </Button>
            </Link>
          )}
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                <Avatar className="h-8 w-8">
                  <AvatarImage src={profile?.profilePicture} alt={`${profile?.firstName} ${profile?.lastName}`} />
                  <AvatarFallback className="bg-gradient-to-r from-[#f600fe] to-[#0033d9] text-white">
                    {getInitials()}
                  </AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">{profile?.firstName} {profile?.lastName}</p>
                  <p className="text-xs leading-none text-muted-foreground">{profile?.email || user?.email}</p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>
                <Link to="/profile" className="w-full">Profile Settings</Link>
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Link to="/settings" className="w-full">App Settings</Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleSignOut}>
                Log out
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
};

export default Header;



================================================
FILE: src/components/ProtectedRoute.tsx
================================================

import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen">Loading...</div>;
  }

  if (!user) {
    // Redirect to login page but save the attempted location
    return <Navigate to="/auth/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;



================================================
FILE: src/components/ui/accordion.tsx
================================================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



================================================
FILE: src/components/ui/alert-dialog.tsx
================================================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================
FILE: src/components/ui/alert.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================
FILE: src/components/ui/aspect-ratio.tsx
================================================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }



================================================
FILE: src/components/ui/avatar.tsx
================================================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



================================================
FILE: src/components/ui/badge.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



================================================
FILE: src/components/ui/breadcrumb.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



================================================
FILE: src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================
FILE: src/components/ui/calendar.tsx
================================================
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



================================================
FILE: src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================
FILE: src/components/ui/carousel.tsx
================================================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



================================================
FILE: src/components/ui/chart.tsx
================================================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



================================================
FILE: src/components/ui/checkbox.tsx
================================================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



================================================
FILE: src/components/ui/collapsible.tsx
================================================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



================================================
FILE: src/components/ui/command.tsx
================================================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================
FILE: src/components/ui/context-menu.tsx
================================================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



================================================
FILE: src/components/ui/dialog.tsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================
FILE: src/components/ui/drawer.tsx
================================================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



================================================
FILE: src/components/ui/dropdown-menu.tsx
================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



================================================
FILE: src/components/ui/form.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



================================================
FILE: src/components/ui/hover-card.tsx
================================================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



================================================
FILE: src/components/ui/input-otp.tsx
================================================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================
FILE: src/components/ui/label.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================
FILE: src/components/ui/menubar.tsx
================================================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}



================================================
FILE: src/components/ui/navigation-menu.tsx
================================================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}



================================================
FILE: src/components/ui/pagination.tsx
================================================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}



================================================
FILE: src/components/ui/popover.tsx
================================================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



================================================
FILE: src/components/ui/progress.tsx
================================================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



================================================
FILE: src/components/ui/radio-group.tsx
================================================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================
FILE: src/components/ui/resizable.tsx
================================================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



================================================
FILE: src/components/ui/scroll-area.tsx
================================================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



================================================
FILE: src/components/ui/select.tsx
================================================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================
FILE: src/components/ui/separator.tsx
================================================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



================================================
FILE: src/components/ui/sheet.tsx
================================================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}




================================================
FILE: src/components/ui/sidebar.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



================================================
FILE: src/components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }



================================================
FILE: src/components/ui/slider.tsx
================================================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



================================================
FILE: src/components/ui/sonner.tsx
================================================
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }



================================================
FILE: src/components/ui/switch.tsx
================================================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================
FILE: src/components/ui/table.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
FILE: src/components/ui/tabs.tsx
================================================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: src/components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }



================================================
FILE: src/components/ui/toast.tsx
================================================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================
FILE: src/components/ui/toaster.tsx
================================================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



================================================
FILE: src/components/ui/toggle-group.tsx
================================================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }



================================================
FILE: src/components/ui/toggle.tsx
================================================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }



================================================
FILE: src/components/ui/tooltip.tsx
================================================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



================================================
FILE: src/components/ui/use-toast.ts
================================================

import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };



================================================
FILE: src/contexts/AuthContext.tsx
================================================

import React, { createContext, useContext, useEffect, useState } from 'react';
import { Session, User } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/components/ui/use-toast';

interface AuthContextType {
  user: User | null;
  session: Session | null;
  loading: boolean;
  signInWithEmail: (email: string, password: string) => Promise<void>;
  signInWithGoogle: () => Promise<void>;
  signInWithLinkedIn: () => Promise<void>;
  signUp: (email: string, password: string) => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
  signOut: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Set up auth state listener FIRST
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        setSession(session);
        setUser(session?.user ?? null);

        if (event === 'SIGNED_IN') {
          toast({
            title: "Signed in successfully",
            description: `Welcome${session?.user?.user_metadata?.name ? ` ${session.user.user_metadata.name}` : ''}!`,
          });
        } else if (event === 'SIGNED_OUT') {
          toast({
            title: "Signed out",
            description: "You have been signed out.",
          });
        }
      }
    );

    // THEN check for existing session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setUser(session?.user ?? null);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signInWithEmail = async (email: string, password: string) => {
    try {
      const { error } = await supabase.auth.signInWithPassword({ email, password });
      if (error) throw error;
    } catch (error: any) {
      toast({
        title: "Sign in failed",
        description: error.message || "Failed to sign in. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const signInWithGoogle = async () => {
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/`,
        },
      });
      if (error) throw error;
    } catch (error: any) {
      toast({
        title: "Google sign in failed",
        description: error.message || "Failed to sign in with Google. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const signInWithLinkedIn = async () => {
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'linkedin_oidc',
        options: {
          redirectTo: `${window.location.origin}/`,
        },
      });
      if (error) throw error;
    } catch (error: any) {
      toast({
        title: "LinkedIn sign in failed",
        description: error.message || "Failed to sign in with LinkedIn. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const signUp = async (email: string, password: string) => {
    try {
      const { error } = await supabase.auth.signUp({ 
        email, 
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/`,
        }
      });
      if (error) throw error;
      toast({
        title: "Sign up successful",
        description: "Please check your email to confirm your account.",
      });
    } catch (error: any) {
      toast({
        title: "Sign up failed",
        description: error.message || "Failed to sign up. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const resetPassword = async (email: string) => {
    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`,
      });
      if (error) throw error;
      toast({
        title: "Password reset email sent",
        description: "Please check your email to reset your password.",
      });
    } catch (error: any) {
      toast({
        title: "Password reset failed",
        description: error.message || "Failed to send reset email. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const signOut = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
    } catch (error: any) {
      toast({
        title: "Sign out failed",
        description: error.message || "Failed to sign out. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  return (
    <AuthContext.Provider value={{
      user,
      session,
      loading,
      signInWithEmail,
      signInWithGoogle,
      signInWithLinkedIn,
      signUp,
      resetPassword,
      signOut,
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}



================================================
FILE: src/contexts/CVContext.tsx
================================================

import React, { createContext, useContext, useState, ReactNode } from 'react';
import { CV, CVSectionVisibility, CVSectionOrder } from '@/types/cv';

interface CVContextType {
  cv: CV | null;
  sectionVisibility: CVSectionVisibility;
  sectionOrder: CVSectionOrder;
  isAnonymized: boolean;
  isLoading: boolean;
  setCv: (cv: CV | null) => void;
  updateCvField: (field: string, value: any) => void;
  setSectionVisibility: (section: keyof CVSectionVisibility, isVisible: boolean) => void;
  setSectionOrder: (order: string[]) => void;
  setIsAnonymized: (value: boolean) => void;
  setIsLoading: (value: boolean) => void;
}

const defaultSectionVisibility: CVSectionVisibility = {
  personalInfo: true,
  profileStatement: true,
  skills: true,
  experience: true,
  education: true,
  certifications: true,
  achievements: true,
  languages: true,
  professionalMemberships: true,
  earlierCareer: true,
  publications: true,
  additionalDetails: true,
};

const defaultSectionOrder: CVSectionOrder = {
  sections: [
    'personalInfo',
    'profileStatement',
    'skills',
    'experience',
    'education',
    'certifications',
    'achievements',
    'languages',
    'professionalMemberships',
    'earlierCareer',
    'publications',
    'additionalDetails',
  ],
};

const CVContext = createContext<CVContextType | undefined>(undefined);

export const useCVContext = () => {
  const context = useContext(CVContext);
  if (!context) {
    throw new Error('useCVContext must be used within a CVProvider');
  }
  return context;
};

export const CVProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [cv, setCv] = useState<CV | null>(null);
  const [sectionVisibility, setSectionVisibility] = useState<CVSectionVisibility>(defaultSectionVisibility);
  const [sectionOrder, setSectionOrder] = useState<CVSectionOrder>(defaultSectionOrder);
  const [isAnonymized, setIsAnonymized] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const updateCvField = (field: string, value: any) => {
    if (!cv) return;
    
    // Handle nested fields using dot notation (e.g., "location.city")
    const fields = field.split('.');
    if (fields.length === 1) {
      setCv({ ...cv, [field]: value });
    } else {
      // For nested fields
      const newCV = { ...cv };
      let current: any = newCV;
      for (let i = 0; i < fields.length - 1; i++) {
        if (!current[fields[i]]) {
          current[fields[i]] = {};
        }
        current = current[fields[i]];
      }
      current[fields[fields.length - 1]] = value;
      setCv(newCV);
    }
  };

  const handleSetSectionVisibility = (
    section: keyof CVSectionVisibility,
    isVisible: boolean
  ) => {
    setSectionVisibility((prev) => ({
      ...prev,
      [section]: isVisible,
    }));
  };

  const handleSetSectionOrder = (order: string[]) => {
    setSectionOrder({ sections: order });
  };

  return (
    <CVContext.Provider
      value={{
        cv,
        sectionVisibility,
        sectionOrder,
        isAnonymized,
        isLoading,
        setCv,
        updateCvField,
        setSectionVisibility: handleSetSectionVisibility,
        setSectionOrder: handleSetSectionOrder,
        setIsAnonymized,
        setIsLoading,
      }}
    >
      {children}
    </CVContext.Provider>
  );
};



================================================
FILE: src/contexts/RecruiterContext.tsx
================================================

import React, { createContext, useContext, useState, ReactNode } from 'react';
import { RecruiterProfile } from '@/types/cv';

interface RecruiterContextType {
  profile: RecruiterProfile | null;
  isLoading: boolean;
  setProfile: (profile: RecruiterProfile | null) => void;
  updateProfileField: (field: keyof RecruiterProfile, value: any) => void;
  setIsLoading: (value: boolean) => void;
}

const defaultProfile: RecruiterProfile = {
  firstName: '',
  lastName: '',
  email: '',
  phone: '',
  agencyName: '',
};

const RecruiterContext = createContext<RecruiterContextType | undefined>(undefined);

export const useRecruiterContext = () => {
  const context = useContext(RecruiterContext);
  if (!context) {
    throw new Error('useRecruiterContext must be used within a RecruiterProvider');
  }
  return context;
};

export const RecruiterProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [profile, setProfile] = useState<RecruiterProfile | null>(defaultProfile);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const updateProfileField = (field: keyof RecruiterProfile, value: any) => {
    if (!profile) return;
    setProfile({ ...profile, [field]: value });
  };

  return (
    <RecruiterContext.Provider
      value={{
        profile,
        isLoading,
        setProfile,
        updateProfileField,
        setIsLoading,
      }}
    >
      {children}
    </RecruiterContext.Provider>
  );
};



================================================
FILE: src/contexts/SettingsContext.tsx
================================================

import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { AppSettings, CVSectionVisibility, CVSectionOrder } from '@/types/cv';
import { getAppSettings, updateAppSettings } from '@/services/api';
import { toast } from '@/components/ui/use-toast';

interface SettingsContextType {
  settings: AppSettings;
  updateSettings: (settings: Partial<AppSettings>) => void;
  setSectionVisibility: (section: keyof CVSectionVisibility, isVisible: boolean) => void;
  setSectionOrder: (sections: string[]) => void;
  saveSettings: () => Promise<void>;
  isLoading: boolean;
  error: string | null;
}

const defaultSectionVisibility: CVSectionVisibility = {
  personalInfo: true,
  profileStatement: true,
  skills: true,
  experience: true,
  education: true,
  certifications: true,
  achievements: true,
  languages: true,
  professionalMemberships: true,
  earlierCareer: true,
  publications: true,
  additionalDetails: true,
};

const defaultSectionOrder = [
  'personalInfo',
  'profileStatement',
  'skills',
  'experience',
  'education',
  'achievements',
  'certifications',
  'languages',
  'professionalMemberships',
  'publications',
  'earlierCareer',
  'additionalDetails',
];

const defaultSettings: AppSettings = {
  defaultSectionVisibility: defaultSectionVisibility,
  defaultSectionOrder: { sections: defaultSectionOrder },
  defaultAnonymize: false,
  keepOriginalFiles: true,
  defaultExportFormat: 'PDF',
};

const SettingsContext = createContext<SettingsContextType | undefined>(undefined);

export const useSettingsContext = () => {
  const context = useContext(SettingsContext);
  if (!context) {
    throw new Error('useSettingsContext must be used within a SettingsProvider');
  }
  return context;
};

export const SettingsProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [settings, setSettings] = useState<AppSettings>(defaultSettings);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);

  // Initialize settings from API when the component mounts
  useEffect(() => {
    if (isInitialized) return;
    
    const initializeSettings = async () => {
      try {
        console.log('[SettingsContext] Initializing settings from API...');
        setIsLoading(true);
        setError(null);
        
        const apiSettings = await getAppSettings();
        console.log('[SettingsContext] Received settings from API:', apiSettings);
        
        // Ensure the section order exists
        if (!apiSettings.defaultSectionOrder) {
          apiSettings.defaultSectionOrder = defaultSettings.defaultSectionOrder;
        }
        
        setSettings(apiSettings);
      } catch (error) {
        console.error('[SettingsContext] Failed to initialize settings from API:', error);
        setError('Failed to load settings. Please try again later.');
        // Fallback to default settings if API fails
        console.log('[SettingsContext] Using default settings');
      } finally {
        setIsLoading(false);
        setIsInitialized(true);
      }
    };

    initializeSettings();
  }, [isInitialized]);

  const updateSettings = (newSettings: Partial<AppSettings>) => {
    console.log('[SettingsContext] Updating settings with:', newSettings);
    setSettings(prev => ({ ...prev, ...newSettings }));
  };

  const setSectionVisibility = (section: keyof CVSectionVisibility, isVisible: boolean) => {
    console.log(`[SettingsContext] Setting visibility for ${section} to ${isVisible}`);
    setSettings(prev => ({
      ...prev,
      defaultSectionVisibility: {
        ...prev.defaultSectionVisibility,
        [section]: isVisible,
      },
    }));
  };
  
  const setSectionOrder = (sections: string[]) => {
    console.log('[SettingsContext] Setting section order to:', sections);
    setSettings(prev => ({
      ...prev,
      defaultSectionOrder: {
        sections: sections,
      },
    }));
  };
  
  const saveSettings = async () => {
    try {
      console.log('[SettingsContext] Saving settings to API:', settings);
      setIsLoading(true);
      const updatedSettings = await updateAppSettings(settings);
      setSettings(updatedSettings);
      toast({
        title: "Settings updated",
        description: "Your settings have been saved successfully.",
      });
      return Promise.resolve();
    } catch (error) {
      console.error('[SettingsContext] Error saving settings:', error);
      setError('Failed to save settings. Please try again later.');
      toast({
        title: "Update failed",
        description: "Failed to save your settings. Please try again.",
        variant: "destructive",
      });
      return Promise.reject(error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SettingsContext.Provider
      value={{
        settings,
        updateSettings,
        setSectionVisibility,
        setSectionOrder,
        saveSettings,
        isLoading,
        error
      }}
    >
      {children}
    </SettingsContext.Provider>
  );
};



================================================
FILE: src/hooks/use-mobile.tsx
================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



================================================
FILE: src/hooks/use-toast.ts
================================================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



================================================
FILE: src/integrations/supabase/client.ts
================================================
// This file is automatically generated. Do not edit it directly.
import { createBrowserClient } from '@supabase/ssr'
import { createClient as createSupabaseClient } from '@supabase/supabase-js'
import type { Database } from './types'

// Environment variables for API endpoints
export const PARSE_CV_ENDPOINT = "https://europe-west9-hireable-places.cloudfunctions.net/cv_optimizer"
export const GENERATE_CV_ENDPOINT = "" // To be populated later

// Create and export the Supabase client
export function createClient() {
  if (import.meta.env.MODE === 'test') {
    return createSupabaseClient<Database>(
      import.meta.env.VITE_SUPABASE_URL,
      import.meta.env.VITE_SUPABASE_ANON_KEY
    )
  }

  return createBrowserClient<Database>(
    import.meta.env.VITE_SUPABASE_URL,
    import.meta.env.VITE_SUPABASE_ANON_KEY
  )
}

// Export a default instance for backward compatibility
export const supabase = createClient()



================================================
FILE: src/integrations/supabase/server.ts
================================================
import { createClient } from '@supabase/supabase-js'
import type { Database } from './types'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export function createServerClient() {
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Missing Supabase environment variables')
  }

  return createClient<Database>(
    supabaseUrl,
    supabaseAnonKey,
    {
      auth: {
        persistSession: false
      }
    }
  )
} 


================================================
FILE: src/integrations/supabase/types.ts
================================================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      candidates: {
        Row: {
          created_at: string
          current_company: string | null
          current_position: string | null
          first_name: string | null
          id: string
          last_name: string | null
          owner_id: string | null
          updated_at: string
        }
        Insert: {
          created_at?: string
          current_company?: string | null
          current_position?: string | null
          first_name?: string | null
          id?: string
          last_name?: string | null
          owner_id?: string | null
          updated_at?: string
        }
        Update: {
          created_at?: string
          current_company?: string | null
          current_position?: string | null
          first_name?: string | null
          id?: string
          last_name?: string | null
          owner_id?: string | null
          updated_at?: string
        }
        Relationships: []
      }
      companies: {
        Row: {
          address: string | null
          brand_color: string | null
          created_at: string
          default_cv_template: string | null
          description: string | null
          id: string
          logo_storage_path: string | null
          name: string
          updated_at: string
          website: string | null
        }
        Insert: {
          address?: string | null
          brand_color?: string | null
          created_at?: string
          default_cv_template?: string | null
          description?: string | null
          id?: string
          logo_storage_path?: string | null
          name: string
          updated_at?: string
          website?: string | null
        }
        Update: {
          address?: string | null
          brand_color?: string | null
          created_at?: string
          default_cv_template?: string | null
          description?: string | null
          id?: string
          logo_storage_path?: string | null
          name?: string
          updated_at?: string
          website?: string | null
        }
        Relationships: []
      }
      cv_analysis_results: {
        Row: {
          created_at: string
          cv_id: string
          id: string
          jd_storage_path: string | null
          model_used: string | null
          result_data: Json | null
          task_type: Database["public"]["Enums"]["analysis_task_type"]
        }
        Insert: {
          created_at?: string
          cv_id: string
          id?: string
          jd_storage_path?: string | null
          model_used?: string | null
          result_data?: Json | null
          task_type: Database["public"]["Enums"]["analysis_task_type"]
        }
        Update: {
          created_at?: string
          cv_id?: string
          id?: string
          jd_storage_path?: string | null
          model_used?: string | null
          result_data?: Json | null
          task_type?: Database["public"]["Enums"]["analysis_task_type"]
        }
        Relationships: [
          {
            foreignKeyName: "cv_analysis_results_cv_id_fkey"
            columns: ["cv_id"]
            isOneToOne: false
            referencedRelation: "cvs"
            referencedColumns: ["id"]
          },
        ]
      }
      cv_chats: {
        Row: {
          cv_id: string
          id: number
          message_text: string
          sender_type: Database["public"]["Enums"]["chat_sender_type"]
          timestamp: string
          user_id: string | null
        }
        Insert: {
          cv_id: string
          id?: number
          message_text: string
          sender_type: Database["public"]["Enums"]["chat_sender_type"]
          timestamp?: string
          user_id?: string | null
        }
        Update: {
          cv_id?: string
          id?: number
          message_text?: string
          sender_type?: Database["public"]["Enums"]["chat_sender_type"]
          timestamp?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "cv_chats_cv_id_fkey"
            columns: ["cv_id"]
            isOneToOne: false
            referencedRelation: "cvs"
            referencedColumns: ["id"]
          },
        ]
      }
      cvs: {
        Row: {
          candidate_id: string
          created_at: string
          error_message: string | null
          id: string
          original_file_storage_path: string | null
          original_filename: string | null
          parsed_data: Json | null
          status: Database["public"]["Enums"]["cv_status"]
          updated_at: string
          uploader_id: string
        }
        Insert: {
          candidate_id: string
          created_at?: string
          error_message?: string | null
          id?: string
          original_file_storage_path?: string | null
          original_filename?: string | null
          parsed_data?: Json | null
          status?: Database["public"]["Enums"]["cv_status"]
          updated_at?: string
          uploader_id: string
        }
        Update: {
          candidate_id?: string
          created_at?: string
          error_message?: string | null
          id?: string
          original_file_storage_path?: string | null
          original_filename?: string | null
          parsed_data?: Json | null
          status?: Database["public"]["Enums"]["cv_status"]
          updated_at?: string
          uploader_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "cvs_candidate_id_fkey"
            columns: ["candidate_id"]
            isOneToOne: false
            referencedRelation: "candidates"
            referencedColumns: ["id"]
          },
        ]
      }
      generated_documents: {
        Row: {
          client_logo_storage_path: string | null
          created_at: string
          cv_id: string
          format: string
          generated_file_storage_path: string
          generator_id: string
          id: string
          included_cover_page: boolean | null
          included_recruiter_branding: boolean | null
          settings_snapshot: Json | null
          template_style: string | null
        }
        Insert: {
          client_logo_storage_path?: string | null
          created_at?: string
          cv_id: string
          format: string
          generated_file_storage_path: string
          generator_id: string
          id?: string
          included_cover_page?: boolean | null
          included_recruiter_branding?: boolean | null
          settings_snapshot?: Json | null
          template_style?: string | null
        }
        Update: {
          client_logo_storage_path?: string | null
          created_at?: string
          cv_id?: string
          format?: string
          generated_file_storage_path?: string
          generator_id?: string
          id?: string
          included_cover_page?: boolean | null
          included_recruiter_branding?: boolean | null
          settings_snapshot?: Json | null
          template_style?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "generated_documents_cv_id_fkey"
            columns: ["cv_id"]
            isOneToOne: false
            referencedRelation: "cvs"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          auto_optimize_upload: boolean | null
          bio: string | null
          company_id: string | null
          created_at: string
          custom_ai_instructions: string | null
          default_ai_model: string | null
          default_anonymize: boolean | null
          default_email_template: string | null
          default_export_format: string | null
          default_include_cover_page: boolean | null
          default_include_recruiter_details: boolean | null
          default_section_order: Json | null
          default_section_visibility: Json | null
          email: string | null
          email_notifications: boolean | null
          first_name: string | null
          grammar_correction: boolean | null
          id: string
          job_title: string | null
          last_name: string | null
          phone: string | null
          processing_notifications: boolean | null
          smart_keyword_detection: boolean | null
          updated_at: string
        }
        Insert: {
          auto_optimize_upload?: boolean | null
          bio?: string | null
          company_id?: string | null
          created_at?: string
          custom_ai_instructions?: string | null
          default_ai_model?: string | null
          default_anonymize?: boolean | null
          default_email_template?: string | null
          default_export_format?: string | null
          default_include_cover_page?: boolean | null
          default_include_recruiter_details?: boolean | null
          default_section_order?: Json | null
          default_section_visibility?: Json | null
          email?: string | null
          email_notifications?: boolean | null
          first_name?: string | null
          grammar_correction?: boolean | null
          id: string
          job_title?: string | null
          last_name?: string | null
          phone?: string | null
          processing_notifications?: boolean | null
          smart_keyword_detection?: boolean | null
          updated_at?: string
        }
        Update: {
          auto_optimize_upload?: boolean | null
          bio?: string | null
          company_id?: string | null
          created_at?: string
          custom_ai_instructions?: string | null
          default_ai_model?: string | null
          default_anonymize?: boolean | null
          default_email_template?: string | null
          default_export_format?: string | null
          default_include_cover_page?: boolean | null
          default_include_recruiter_details?: boolean | null
          default_section_order?: Json | null
          default_section_visibility?: Json | null
          email?: string | null
          email_notifications?: boolean | null
          first_name?: string | null
          grammar_correction?: boolean | null
          id?: string
          job_title?: string | null
          last_name?: string | null
          phone?: string | null
          processing_notifications?: boolean | null
          smart_keyword_detection?: boolean | null
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "profiles_company_id_fkey"
            columns: ["company_id"]
            isOneToOne: false
            referencedRelation: "companies"
            referencedColumns: ["id"]
          },
        ]
      }
      migrations: {
        Row: {
          id: string
          name: string
          up_sql: string
          down_sql: string
          status: string
          created_at: string
          applied_at: string | null
          error_message: string | null
        }
        Insert: {
          id?: string
          name: string
          up_sql: string
          down_sql: string
          status?: string
          created_at?: string
          applied_at?: string | null
          error_message?: string | null
        }
        Update: {
          id?: string
          name?: string
          up_sql?: string
          down_sql?: string
          status?: string
          created_at?: string
          applied_at?: string | null
          error_message?: string | null
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      exec_sql: {
        Args: {
          sql: string
        }
        Returns: void
      }
    }
    Enums: {
      analysis_task_type: "ps" | "cs" | "ka" | "role" | "scoring"
      chat_sender_type: "user" | "assistant"
      cv_status:
        | "Uploaded"
        | "Parsing"
        | "Parsed"
        | "Optimizing_PS"
        | "Optimizing_CS"
        | "Optimizing_KA"
        | "Optimizing_Role"
        | "Scoring"
        | "OptimizationComplete"
        | "Generating"
        | "Generated"
        | "Error"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never



================================================
FILE: src/integrations/supabase/__tests__/test-utils.test.ts
================================================
import { testUtils, TestUtils } from '../utils/test-utils'
import { createClient } from '../client'
import { handleError } from '../utils/error-handler'
import { SupabaseClient } from '@supabase/supabase-js'
import { Database } from '../../../lib/supabase/types'

// Mock Supabase client
jest.mock('../client', () => ({
  createClient: jest.fn(),
}))

describe('TestUtils', () => {
  let mockClient: jest.Mocked<SupabaseClient<Database>>
  let utils: TestUtils

  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks()

    // Create mock Supabase client
    mockClient = {
      auth: {
        signUp: jest.fn().mockResolvedValue({
          data: {
            user: {
              id: 'test-user-id',
              email: 'test@example.com',
            },
          },
          error: null,
        }),
        admin: {
          listUsers: jest.fn().mockResolvedValue({
            data: {
              users: [
                {
                  id: 'test-user-id',
                  email: 'test@example.com',
                },
              ],
            },
            error: null,
          }),
          deleteUser: jest.fn().mockResolvedValue({
            data: null,
            error: null,
          }),
        },
      },
      from: jest.fn().mockReturnThis(),
      insert: jest.fn().mockReturnThis(),
      select: jest.fn().mockReturnThis(),
      single: jest.fn().mockResolvedValue({
        data: {
          id: 'test-id',
          name: 'Test Company',
          first_name: 'Test',
          last_name: 'Candidate',
          candidate_id: 'test-candidate-id',
          uploader_id: 'test-user-id',
        },
        error: null,
      }),
      delete: jest.fn().mockReturnThis(),
      neq: jest.fn().mockResolvedValue({
        data: null,
        error: null,
      }),
      eq: jest.fn().mockResolvedValue({
        data: [],
        error: null,
      }),
    } as unknown as jest.Mocked<SupabaseClient<Database>>

    // Set up createClient mock
    ;(createClient as jest.Mock).mockReturnValue(mockClient)

    // Create new instance for each test
    utils = new TestUtils()
  })

  it('should create test user', async () => {
    const testUser = await utils.createTestUser('test@example.com', 'testpassword123')
    expect(testUser.user).toBeDefined()
    expect(testUser.user.email).toBe('test@example.com')
    expect(mockClient.auth.signUp).toHaveBeenCalledWith({
      email: 'test@example.com',
      password: 'testpassword123',
    })
  })

  it('should create test company', async () => {
    const testCompany = await utils.createTestCompany('Test Company')
    expect(testCompany).toBeDefined()
    expect(testCompany.name).toBe('Test Company')
    expect(mockClient.from).toHaveBeenCalledWith('companies')
  })

  it('should create test candidate', async () => {
    const testCandidate = await utils.createTestCandidate('test-company-id')
    expect(testCandidate).toBeDefined()
    expect(testCandidate.first_name).toBe('Test')
    expect(testCandidate.last_name).toBe('Candidate')
    expect(mockClient.from).toHaveBeenCalledWith('candidates')
  })

  it('should create test CV', async () => {
    const testCV = await utils.createTestCV('test-candidate-id', 'test-user-id')
    expect(testCV).toBeDefined()
    expect(testCV.candidate_id).toBe('test-candidate-id')
    expect(testCV.uploader_id).toBe('test-user-id')
    expect(mockClient.from).toHaveBeenCalledWith('cvs')
  })

  it('should clean up test data', async () => {
    await utils.cleanupTestData()

    // Verify cleanup calls
    expect(mockClient.from).toHaveBeenCalledWith('cv_chats')
    expect(mockClient.from).toHaveBeenCalledWith('cv_analysis_results')
    expect(mockClient.from).toHaveBeenCalledWith('generated_documents')
    expect(mockClient.from).toHaveBeenCalledWith('cvs')
    expect(mockClient.from).toHaveBeenCalledWith('candidates')
    expect(mockClient.from).toHaveBeenCalledWith('companies')
    expect(mockClient.from).toHaveBeenCalledWith('profiles')
    expect(mockClient.auth.admin.listUsers).toHaveBeenCalled()
    expect(mockClient.auth.admin.deleteUser).toHaveBeenCalledWith('test-user-id')
  })
}) 


================================================
FILE: src/integrations/supabase/auth/hooks.ts
================================================
import { useEffect, useState } from 'react'
import { createClient } from '../client'
import type { User, Session } from '@supabase/supabase-js'

export const useSupabaseAuth = () => {
  const [user, setUser] = useState<User | null>(null)
  const [session, setSession] = useState<Session | null>(null)
  const [loading, setLoading] = useState(true)
  const supabase = createClient()

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
      setUser(session?.user ?? null)
      setLoading(false)
    })

    // Listen for auth changes
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
      setUser(session?.user ?? null)
      setLoading(false)
    })

    return () => subscription.unsubscribe()
  }, [])

  return {
    user,
    session,
    loading,
  }
}

export const useSignIn = () => {
  const supabase = createClient()
  
  const signIn = async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })
    if (error) throw error
    return data
  }

  return { signIn }
}

export const useSignUp = () => {
  const supabase = createClient()
  
  const signUp = async (email: string, password: string) => {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
    })
    if (error) throw error
    return data
  }

  return { signUp }
}

export const useSignOut = () => {
  const supabase = createClient()
  
  const signOut = async () => {
    const { error } = await supabase.auth.signOut()
    if (error) throw error
  }

  return { signOut }
} 


================================================
FILE: src/integrations/supabase/migrations/001_create_migrations_table.sql
================================================
-- Create migrations table
CREATE TABLE IF NOT EXISTS migrations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  up_sql TEXT NOT NULL,
  down_sql TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  applied_at TIMESTAMP WITH TIME ZONE,
  error_message TEXT
);

-- Create exec_sql function
CREATE OR REPLACE FUNCTION exec_sql(sql TEXT)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  EXECUTE sql;
END;
$$;

-- Add RLS policies
ALTER TABLE migrations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow authenticated users to view migrations"
  ON migrations FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Allow authenticated users to insert migrations"
  ON migrations FOR INSERT
  TO authenticated
  WITH CHECK (true);

CREATE POLICY "Allow authenticated users to update migrations"
  ON migrations FOR UPDATE
  TO authenticated
  USING (true)
  WITH CHECK (true); 


================================================
FILE: src/integrations/supabase/services/analysis.ts
================================================
import { createClient } from '../client'
import type { Database } from '../types'

type AnalysisResult = Database['public']['Tables']['cv_analysis_results']['Row']
type AnalysisResultInsert = Database['public']['Tables']['cv_analysis_results']['Insert']
type AnalysisTaskType = Database['public']['Enums']['analysis_task_type']

export const analysisService = {
  async create(data: AnalysisResultInsert) {
    const { data: result, error } = await createClient()
      .from('cv_analysis_results')
      .insert(data)
      .select()
      .single()

    if (error) throw error
    return result
  },

  async getByCVId(cvId: string) {
    const { data: results, error } = await createClient()
      .from('cv_analysis_results')
      .select('*')
      .eq('cv_id', cvId)
      .order('created_at', { ascending: false })

    if (error) throw error
    return results
  },

  async getByTaskType(cvId: string, taskType: AnalysisTaskType) {
    const { data: result, error } = await createClient()
      .from('cv_analysis_results')
      .select('*')
      .eq('cv_id', cvId)
      .eq('task_type', taskType)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    if (error) throw error
    return result
  },

  async delete(id: string) {
    const { error } = await createClient()
      .from('cv_analysis_results')
      .delete()
      .eq('id', id)

    if (error) throw error
  },

  async subscribeToResults(cvId: string, callback: (payload: any) => void) {
    const subscription = createClient()
      .channel('analysis_results_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'cv_analysis_results',
          filter: `cv_id=eq.${cvId}`,
        },
        callback
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },
} 


================================================
FILE: src/integrations/supabase/services/candidates.ts
================================================
import { supabase } from '../client'
import type { Database } from '../types'

type Candidate = Database['public']['Tables']['candidates']['Row']
type CandidateInsert = Database['public']['Tables']['candidates']['Insert']
type CandidateUpdate = Database['public']['Tables']['candidates']['Update']

export const candidateService = {
  async create(data: CandidateInsert) {
    const { data: candidate, error } = await supabase
      .from('candidates')
      .insert(data)
      .select()
      .single()

    if (error) throw error
    return candidate
  },

  async getById(id: string) {
    const { data: candidate, error } = await supabase
      .from('candidates')
      .select('*')
      .eq('id', id)
      .single()

    if (error) throw error
    return candidate
  },

  async listByOwner(ownerId: string) {
    const { data: candidates, error } = await supabase
      .from('candidates')
      .select('*')
      .eq('owner_id', ownerId)
      .order('created_at', { ascending: false })

    if (error) throw error
    return candidates
  },

  async update(id: string, data: CandidateUpdate) {
    const { data: candidate, error } = await supabase
      .from('candidates')
      .update(data)
      .eq('id', id)
      .select()
      .single()

    if (error) throw error
    return candidate
  },

  async delete(id: string) {
    const { error } = await supabase
      .from('candidates')
      .delete()
      .eq('id', id)

    if (error) throw error
  },

  async subscribeToChanges(ownerId: string, callback: (payload: any) => void) {
    const subscription = supabase
      .channel('candidates_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'candidates',
          filter: `owner_id=eq.${ownerId}`,
        },
        callback
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },
} 


================================================
FILE: src/integrations/supabase/services/chats.ts
================================================
import { createClient } from '../client'
import type { Database } from '../types'

type ChatMessage = Database['public']['Tables']['cv_chats']['Row']
type ChatMessageInsert = Database['public']['Tables']['cv_chats']['Insert']
type ChatSenderType = Database['public']['Enums']['chat_sender_type']

export const chatService = {
  async create(data: ChatMessageInsert) {
    const { data: message, error } = await createClient()
      .from('cv_chats')
      .insert(data)
      .select()
      .single()

    if (error) throw error
    return message
  },

  async getByCVId(cvId: string) {
    const { data: messages, error } = await createClient()
      .from('cv_chats')
      .select('*')
      .eq('cv_id', cvId)
      .order('timestamp', { ascending: true })

    if (error) throw error
    return messages
  },

  async subscribeToMessages(cvId: string, callback: (payload: any) => void) {
    const subscription = createClient()
      .channel('chat_messages_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'cv_chats',
          filter: `cv_id=eq.${cvId}`,
        },
        callback
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },

  async sendMessage(cvId: string, message: string, senderType: ChatSenderType = 'user') {
    const { data: chatMessage, error } = await createClient()
      .from('cv_chats')
      .insert({
        cv_id: cvId,
        message_text: message,
        sender_type: senderType,
      })
      .select()
      .single()

    if (error) throw error
    return chatMessage
  },
} 


================================================
FILE: src/integrations/supabase/services/companies.ts
================================================
import { createClient } from '../client'
import type { Database } from '../types'

type Company = Database['public']['Tables']['companies']['Row']
type CompanyInsert = Database['public']['Tables']['companies']['Insert']
type CompanyUpdate = Database['public']['Tables']['companies']['Update']

export const companyService = {
  async create(data: CompanyInsert) {
    const { data: company, error } = await createClient()
      .from('companies')
      .insert(data)
      .select()
      .single()

    if (error) throw error
    return company
  },

  async getById(id: string) {
    const { data: company, error } = await createClient()
      .from('companies')
      .select('*')
      .eq('id', id)
      .single()

    if (error) throw error
    return company
  },

  async update(id: string, data: CompanyUpdate) {
    const { data: company, error } = await createClient()
      .from('companies')
      .update(data)
      .eq('id', id)
      .select()
      .single()

    if (error) throw error
    return company
  },

  async delete(id: string) {
    const { error } = await createClient()
      .from('companies')
      .delete()
      .eq('id', id)

    if (error) throw error
  },

  async subscribeToChanges(companyId: string, callback: (payload: any) => void) {
    const subscription = createClient()
      .channel('companies_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'companies',
          filter: `id=eq.${companyId}`,
        },
        callback
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },
} 


================================================
FILE: src/integrations/supabase/services/cvs.ts
================================================
import { supabase } from '../client'
import type { Database } from '../types'

type CV = Database['public']['Tables']['cvs']['Row']
type CVInsert = Database['public']['Tables']['cvs']['Insert']
type CVUpdate = Database['public']['Tables']['cvs']['Update']
type CVStatus = Database['public']['Enums']['cv_status']

export const cvService = {
  async create(data: CVInsert) {
    const { data: cv, error } = await supabase
      .from('cvs')
      .insert(data)
      .select()
      .single()

    if (error) throw error
    return cv
  },

  async getById(id: string) {
    const { data: cv, error } = await supabase
      .from('cvs')
      .select(`
        *,
        candidate:candidates(*),
        analysis_results:cv_analysis_results(*),
        chats:cv_chats(*)
      `)
      .eq('id', id)
      .single()

    if (error) throw error
    return cv
  },

  async listByCandidate(candidateId: string) {
    const { data: cvs, error } = await supabase
      .from('cvs')
      .select('*')
      .eq('candidate_id', candidateId)
      .order('created_at', { ascending: false })

    if (error) throw error
    return cvs
  },

  async updateStatus(id: string, status: CVStatus) {
    const { data: cv, error } = await supabase
      .from('cvs')
      .update({ status })
      .eq('id', id)
      .select()
      .single()

    if (error) throw error
    return cv
  },

  async update(id: string, data: CVUpdate) {
    const { data: cv, error } = await supabase
      .from('cvs')
      .update(data)
      .eq('id', id)
      .select()
      .single()

    if (error) throw error
    return cv
  },

  async delete(id: string) {
    const { error } = await supabase
      .from('cvs')
      .delete()
      .eq('id', id)

    if (error) throw error
  },

  async subscribeToStatus(cvId: string, callback: (status: CVStatus) => void) {
    const subscription = supabase
      .channel(`cv_status_${cvId}`)
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'cvs',
          filter: `id=eq.${cvId}`,
        },
        (payload) => {
          callback(payload.new.status)
        }
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },

  async subscribeToAnalysisResults(cvId: string, callback: (payload: any) => void) {
    const subscription = supabase
      .channel(`cv_analysis_${cvId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'cv_analysis_results',
          filter: `cv_id=eq.${cvId}`,
        },
        callback
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },
} 


================================================
FILE: src/integrations/supabase/services/documents.ts
================================================
import { createClient } from '../client'
import type { Database } from '../types'

type GeneratedDocument = Database['public']['Tables']['generated_documents']['Row']
type GeneratedDocumentInsert = Database['public']['Tables']['generated_documents']['Insert']

export const documentService = {
  async create(data: GeneratedDocumentInsert) {
    const { data: document, error } = await createClient()
      .from('generated_documents')
      .insert(data)
      .select()
      .single()

    if (error) throw error
    return document
  },

  async getByCVId(cvId: string) {
    const { data: documents, error } = await createClient()
      .from('generated_documents')
      .select('*')
      .eq('cv_id', cvId)
      .order('created_at', { ascending: false })

    if (error) throw error
    return documents
  },

  async getById(id: string) {
    const { data: document, error } = await createClient()
      .from('generated_documents')
      .select('*')
      .eq('id', id)
      .single()

    if (error) throw error
    return document
  },

  async subscribeToDocuments(cvId: string, callback: (payload: any) => void) {
    const subscription = createClient()
      .channel('generated_documents_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'generated_documents',
          filter: `cv_id=eq.${cvId}`,
        },
        callback
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },
} 


================================================
FILE: src/integrations/supabase/services/profiles.ts
================================================
import { createClient } from '../client'
import type { Database } from '../types'

type Profile = Database['public']['Tables']['profiles']['Row']
type ProfileInsert = Database['public']['Tables']['profiles']['Insert']
type ProfileUpdate = Database['public']['Tables']['profiles']['Update']

export const profileService = {
  async create(data: ProfileInsert) {
    const { data: profile, error } = await createClient()
      .from('profiles')
      .insert(data)
      .select()
      .single()

    if (error) throw error
    return profile
  },

  async getById(id: string) {
    const { data: profile, error } = await createClient()
      .from('profiles')
      .select('*')
      .eq('id', id)
      .single()

    if (error) throw error
    return profile
  },

  async getByEmail(email: string) {
    const { data: profile, error } = await createClient()
      .from('profiles')
      .select('*')
      .eq('email', email)
      .single()

    if (error) throw error
    return profile
  },

  async update(id: string, data: ProfileUpdate) {
    const { data: profile, error } = await createClient()
      .from('profiles')
      .update(data)
      .eq('id', id)
      .select()
      .single()

    if (error) throw error
    return profile
  },

  async delete(id: string) {
    const { error } = await createClient()
      .from('profiles')
      .delete()
      .eq('id', id)

    if (error) throw error
  },

  async getByCompanyId(companyId: string) {
    const { data: profiles, error } = await createClient()
      .from('profiles')
      .select('*')
      .eq('company_id', companyId)

    if (error) throw error
    return profiles
  },

  async subscribeToChanges(userId: string, callback: (payload: any) => void) {
    const subscription = createClient()
      .channel('profiles_changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'profiles',
          filter: `id=eq.${userId}`,
        },
        callback
      )
      .subscribe()

    return () => subscription.unsubscribe()
  },
} 


================================================
FILE: src/integrations/supabase/services/storage.ts
================================================
import { supabase } from '../client'

export class SupabaseError extends Error {
  constructor(public originalError: any, public context?: string) {
    super(originalError.message)
    this.name = 'SupabaseError'
  }
}

export const storageService = {
  async uploadCV(file: File, candidateId: string) {
    const filename = `${candidateId}/${Date.now()}-${file.name}`
    const { data, error } = await supabase.storage
      .from('cv_files')
      .upload(filename, file)

    if (error) throw new SupabaseError(error, 'CV Upload')
    return data
  },

  async uploadCompanyLogo(file: File, companyId: string) {
    const filename = `${companyId}/${Date.now()}-${file.name}`
    const { data, error } = await supabase.storage
      .from('company_logos')
      .upload(filename, file)

    if (error) throw new SupabaseError(error, 'Company Logo Upload')
    return data
  },

  async uploadGeneratedDocument(file: File, cvId: string) {
    const filename = `${cvId}/${Date.now()}-${file.name}`
    const { data, error } = await supabase.storage
      .from('generated_documents')
      .upload(filename, file)

    if (error) throw new SupabaseError(error, 'Generated Document Upload')
    return data
  },

  async getPublicUrl(bucket: string, path: string) {
    const { data } = supabase.storage
      .from(bucket)
      .getPublicUrl(path)

    return data.publicUrl
  },

  async getSignedUrl(bucket: string, path: string, expiresIn: number = 3600) {
    const { data, error } = await supabase.storage
      .from(bucket)
      .createSignedUrl(path, expiresIn)

    if (error) throw new SupabaseError(error, 'Get Signed URL')
    return data.signedUrl
  },

  async deleteFile(bucket: string, path: string) {
    const { error } = await supabase.storage
      .from(bucket)
      .remove([path])

    if (error) throw new SupabaseError(error, 'Delete File')
  },

  async listFiles(bucket: string, path: string = '') {
    const { data, error } = await supabase.storage
      .from(bucket)
      .list(path)

    if (error) throw new SupabaseError(error, 'List Files')
    return data
  },
} 


================================================
FILE: src/integrations/supabase/utils/error-handler.ts
================================================
import { PostgrestError } from '@supabase/supabase-js'

export class SupabaseError extends Error {
  constructor(
    message: string,
    public code: string,
    public details?: string,
    public hint?: string
  ) {
    super(message)
    this.name = 'SupabaseError'
  }
}

export function handleSupabaseError(error: PostgrestError): never {
  throw new SupabaseError(
    error.message,
    error.code,
    error.details,
    error.hint
  )
}

export function isSupabaseError(error: unknown): error is SupabaseError {
  return error instanceof SupabaseError
}

export function handleError(error: unknown): never {
  if (isSupabaseError(error)) {
    throw error
  }
  
  if (error instanceof Error) {
    throw new SupabaseError(
      error.message,
      'UNKNOWN_ERROR',
      error.stack
    )
  }

  throw new SupabaseError(
    'An unknown error occurred',
    'UNKNOWN_ERROR'
  )
} 


================================================
FILE: src/integrations/supabase/utils/middleware.ts
================================================
import { createClient } from '../client'
import { handleError } from './error-handler'

export class SupabaseMiddleware {
  private client = createClient()

  async requireAuth() {
    const { data: { session }, error } = await this.client.auth.getSession()
    
    if (error) handleError(error)
    if (!session) throw new Error('Authentication required')
    
    return session
  }

  async requireCompanyAccess(companyId: string) {
    const session = await this.requireAuth()
    
    const { data: profile, error } = await this.client
      .from('profiles')
      .select('company_id')
      .eq('id', session.user.id)
      .single()

    if (error) handleError(error)
    if (!profile || profile.company_id !== companyId) {
      throw new Error('No access to this company')
    }
    
    return profile
  }

  async requireCVAccess(cvId: string) {
    const session = await this.requireAuth()
    
    const { data: cv, error } = await this.client
      .from('cvs')
      .select('candidate_id, uploader_id')
      .eq('id', cvId)
      .single()

    if (error) handleError(error)
    if (!cv) throw new Error('CV not found')
    
    // Check if user is the uploader or has access to the candidate
    if (cv.uploader_id !== session.user.id) {
      const { data: candidate, error: candidateError } = await this.client
        .from('candidates')
        .select('owner_id')
        .eq('id', cv.candidate_id)
        .single()

      if (candidateError) handleError(candidateError)
      if (!candidate || candidate.owner_id !== session.user.id) {
        throw new Error('No access to this CV')
      }
    }
    
    return cv
  }
}

export const middleware = new SupabaseMiddleware() 


================================================
FILE: src/integrations/supabase/utils/migrations.ts
================================================
import { createClient } from '../client'
import { handleError } from './error-handler'

export class MigrationManager {
  private client = createClient()

  async createMigration(name: string, up: string, down: string) {
    const { data, error } = await this.client
      .from('migrations')
      .insert({
        name,
        up_sql: up,
        down_sql: down,
        status: 'pending'
      })
      .select()
      .single()

    if (error) handleError(error)
    return data
  }

  async getPendingMigrations() {
    const { data, error } = await this.client
      .from('migrations')
      .select('*')
      .eq('status', 'pending')
      .order('created_at', { ascending: true })

    if (error) handleError(error)
    return data
  }

  async getAppliedMigrations() {
    const { data, error } = await this.client
      .from('migrations')
      .select('*')
      .eq('status', 'applied')
      .order('created_at', { ascending: true })

    if (error) handleError(error)
    return data
  }

  async applyMigration(id: string) {
    const { data: migration, error: fetchError } = await this.client
      .from('migrations')
      .select('*')
      .eq('id', id)
      .single()

    if (fetchError) handleError(fetchError)
    if (!migration) throw new Error('Migration not found')

    try {
      // Execute the up migration
      const { error: executeError } = await this.client.rpc('exec_sql', {
        sql: migration.up_sql
      })

      if (executeError) throw executeError

      // Update migration status
      const { error: updateError } = await this.client
        .from('migrations')
        .update({ status: 'applied', applied_at: new Date().toISOString() })
        .eq('id', id)

      if (updateError) throw updateError

      return migration
    } catch (error) {
      // Update migration status to failed
      await this.client
        .from('migrations')
        .update({ 
          status: 'failed',
          error_message: error instanceof Error ? error.message : 'Unknown error'
        })
        .eq('id', id)

      throw error
    }
  }

  async rollbackMigration(id: string) {
    const { data: migration, error: fetchError } = await this.client
      .from('migrations')
      .select('*')
      .eq('id', id)
      .single()

    if (fetchError) handleError(fetchError)
    if (!migration) throw new Error('Migration not found')

    try {
      // Execute the down migration
      const { error: executeError } = await this.client.rpc('exec_sql', {
        sql: migration.down_sql
      })

      if (executeError) throw executeError

      // Update migration status
      const { error: updateError } = await this.client
        .from('migrations')
        .update({ status: 'pending', applied_at: null })
        .eq('id', id)

      if (updateError) throw updateError

      return migration
    } catch (error) {
      // Update migration status to failed
      await this.client
        .from('migrations')
        .update({ 
          status: 'failed',
          error_message: error instanceof Error ? error.message : 'Unknown error'
        })
        .eq('id', id)

      throw error
    }
  }
}

export const migrationManager = new MigrationManager() 


================================================
FILE: src/integrations/supabase/utils/query-builder.ts
================================================
import { createClient } from '../client'
import type { Database } from '../types'

type TableName = keyof Database['public']['Tables']
type TableRow<T extends TableName> = Database['public']['Tables'][T]['Row']
type TableInsert<T extends TableName> = Database['public']['Tables'][T]['Insert']
type TableUpdate<T extends TableName> = Database['public']['Tables'][T]['Update']

export class QueryBuilder<T extends TableName> {
  private query: any

  constructor(private table: T) {
    this.query = createClient().from(table)
  }

  select(columns: string) {
    this.query = this.query.select(columns)
    return this
  }

  where(column: keyof TableRow<T>, operator: string, value: any) {
    this.query = this.query.eq(column, value)
    return this
  }

  order(column: keyof TableRow<T>, options: { ascending?: boolean } = {}) {
    this.query = this.query.order(column, options)
    return this
  }

  limit(count: number) {
    this.query = this.query.limit(count)
    return this
  }

  single() {
    this.query = this.query.single()
    return this
  }

  async execute() {
    const { data, error } = await this.query
    if (error) throw error
    return data
  }

  static create<T extends TableName>(table: T) {
    return new QueryBuilder<T>(table)
  }
}

export const createQueryBuilder = <T extends TableName>(table: T) => {
  return QueryBuilder.create(table)
} 


================================================
FILE: src/integrations/supabase/utils/storage.ts
================================================
import { createClient } from '../client'

export class StorageHelper {
  private client = createClient()

  async uploadFile(
    bucket: string,
    path: string,
    file: File,
    options: { cacheControl?: string; upsert?: boolean } = {}
  ) {
    const { data, error } = await this.client.storage
      .from(bucket)
      .upload(path, file, options)

    if (error) throw error
    return data
  }

  async downloadFile(bucket: string, path: string) {
    const { data, error } = await this.client.storage
      .from(bucket)
      .download(path)

    if (error) throw error
    return data
  }

  async deleteFile(bucket: string, path: string) {
    const { error } = await this.client.storage
      .from(bucket)
      .remove([path])

    if (error) throw error
  }

  getPublicUrl(bucket: string, path: string) {
    const { data } = this.client.storage
      .from(bucket)
      .getPublicUrl(path)

    return data.publicUrl
  }

  async listFiles(bucket: string, path: string) {
    const { data, error } = await this.client.storage
      .from(bucket)
      .list(path)

    if (error) throw error
    return data
  }
}

export const storageHelper = new StorageHelper() 


================================================
FILE: src/integrations/supabase/utils/test-utils.ts
================================================
import { createClient } from '../client'
import { handleError } from './error-handler'

export class TestUtils {
  private client = createClient()

  async createTestUser(email: string, password: string) {
    const { data, error } = await this.client.auth.signUp({
      email,
      password
    })

    if (error) handleError(error)
    return data
  }

  async createTestProfile(userId: string, companyId: string) {
    const { data, error } = await this.client
      .from('profiles')
      .insert({
        id: userId,
        company_id: companyId,
        email: 'test@example.com',
        first_name: 'Test',
        last_name: 'User'
      })
      .select()
      .single()

    if (error) handleError(error)
    return data
  }

  async createTestCompany(name: string) {
    const { data, error } = await this.client
      .from('companies')
      .insert({
        name,
        description: 'Test company'
      })
      .select()
      .single()

    if (error) handleError(error)
    return data
  }

  async createTestCandidate(companyId: string) {
    const { data, error } = await this.client
      .from('candidates')
      .insert({
        first_name: 'Test',
        last_name: 'Candidate',
        current_company: 'Test Company',
        current_position: 'Test Position',
        owner_id: companyId
      })
      .select()
      .single()

    if (error) handleError(error)
    return data
  }

  async createTestCV(candidateId: string, uploaderId: string) {
    const { data, error } = await this.client
      .from('cvs')
      .insert({
        candidate_id: candidateId,
        uploader_id: uploaderId,
        status: 'Uploaded',
        original_filename: 'test.pdf'
      })
      .select()
      .single()

    if (error) handleError(error)
    return data
  }

  async cleanupTestData() {
    // Delete in reverse order of dependencies
    await this.client.from('cv_chats').delete().neq('id', 0)
    await this.client.from('cv_analysis_results').delete().neq('id', '')
    await this.client.from('generated_documents').delete().neq('id', '')
    await this.client.from('cvs').delete().neq('id', '')
    await this.client.from('candidates').delete().neq('id', '')
    await this.client.from('companies').delete().neq('id', '')
    await this.client.from('profiles').delete().neq('id', '')
    
    // Delete test users
    const { data: users } = await this.client.auth.admin.listUsers()
    if (users) {
      for (const user of users.users) {
        if (user.email?.includes('test@')) {
          await this.client.auth.admin.deleteUser(user.id)
        }
      }
    }
  }
}

export const testUtils = new TestUtils() 


================================================
FILE: src/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================
FILE: src/lib/supabase/queryBuilder.ts
================================================
import { SupabaseClient } from '@supabase/supabase-js';
import { Database } from './types';

export class QueryBuilder<T extends Database> {
  private query: any;
  private shouldThrow = false;

  constructor(private client: SupabaseClient<T>) {
    this.query = client;
  }

  from<TableName extends keyof T['public']['Tables']>(table: TableName) {
    this.query = this.query.from(table);
    return this;
  }

  select(columns?: string) {
    this.query = this.query.select(columns);
    return this;
  }

  insert<TableName extends keyof T['public']['Tables']>(
    data: T['public']['Tables'][TableName] extends { Insert: any }
      ? T['public']['Tables'][TableName]['Insert']
      : never
  ) {
    this.query = this.query.insert(data);
    return this;
  }

  update<TableName extends keyof T['public']['Tables']>(
    data: T['public']['Tables'][TableName] extends { Update: any }
      ? Partial<T['public']['Tables'][TableName]['Update']>
      : never
  ) {
    this.query = this.query.update(data);
    return this;
  }

  delete() {
    this.query = this.query.delete();
    return this;
  }

  eq(column: string, value: any) {
    this.query = this.query.eq(column, value);
    return this;
  }

  neq(column: string, value: any) {
    this.query = this.query.neq(column, value);
    return this;
  }

  gt(column: string, value: any) {
    this.query = this.query.gt(column, value);
    return this;
  }

  gte(column: string, value: any) {
    this.query = this.query.gte(column, value);
    return this;
  }

  lt(column: string, value: any) {
    this.query = this.query.lt(column, value);
    return this;
  }

  lte(column: string, value: any) {
    this.query = this.query.lte(column, value);
    return this;
  }

  like(column: string, value: string) {
    this.query = this.query.like(column, value);
    return this;
  }

  ilike(column: string, value: string) {
    this.query = this.query.ilike(column, value);
    return this;
  }

  in(column: string, values: any[]) {
    this.query = this.query.in(column, values);
    return this;
  }

  order(column: string, options?: { ascending?: boolean }) {
    this.query = this.query.order(column, options);
    return this;
  }

  limit(count: number) {
    this.query = this.query.limit(count);
    return this;
  }

  offset(count: number) {
    this.query = this.query.offset(count);
    return this;
  }

  async single() {
    const result = await this.execute();
    return result;
  }

  async maybeSingle() {
    const result = await this.execute();
    return result;
  }

  throwOnError() {
    this.shouldThrow = true;
    this.query = this.query.throwOnError();
    return this;
  }

  async execute() {
    try {
      const result = await this.query;
      if (result.error && this.shouldThrow) {
        throw result.error;
      }
      return result;
    } catch (error) {
      if (this.shouldThrow) {
        throw error;
      }
      return { data: null, error };
    }
  }
} 


================================================
FILE: src/lib/supabase/types.ts
================================================
export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string;
          name: string;
          email: string;
          status: string;
          age: number;
          points: number;
          role: string;
          created_at: string;
          last_login: string;
        };
        Insert: {
          id: string;
          name: string;
          email: string;
          status?: string;
          age?: number;
          points?: number;
          role?: string;
          created_at?: string;
          last_login?: string;
        };
        Update: {
          id?: string;
          name?: string;
          email?: string;
          status?: string;
          age?: number;
          points?: number;
          role?: string;
          created_at?: string;
          last_login?: string;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
  };
} 


================================================
FILE: src/lib/supabase/__tests__/queryBuilder.test.ts
================================================
import { createClient } from '@supabase/supabase-js';
import { QueryBuilder } from '../queryBuilder';
import { Database } from '../types';

// Mock Supabase client
jest.mock('@supabase/supabase-js', () => ({
  createClient: jest.fn(),
}));

describe('QueryBuilder', () => {
  let queryBuilder: QueryBuilder<Database>;
  let mockSupabaseClient: any;

  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks();

    // Create mock Supabase client with Promise-based responses
    mockSupabaseClient = {
      from: jest.fn().mockReturnThis(),
      select: jest.fn().mockReturnThis(),
      insert: jest.fn().mockReturnThis(),
      update: jest.fn().mockReturnThis(),
      delete: jest.fn().mockReturnThis(),
      eq: jest.fn().mockReturnThis(),
      neq: jest.fn().mockReturnThis(),
      gt: jest.fn().mockReturnThis(),
      gte: jest.fn().mockReturnThis(),
      lt: jest.fn().mockReturnThis(),
      lte: jest.fn().mockReturnThis(),
      like: jest.fn().mockReturnThis(),
      ilike: jest.fn().mockReturnThis(),
      in: jest.fn().mockReturnThis(),
      order: jest.fn().mockReturnThis(),
      limit: jest.fn().mockReturnThis(),
      offset: jest.fn().mockReturnThis(),
      single: jest.fn().mockImplementation(() => Promise.resolve({ data: null, error: null })),
      maybeSingle: jest.fn().mockImplementation(() => Promise.resolve({ data: null, error: null })),
      throwOnError: jest.fn().mockReturnThis(),
      then: jest.fn().mockImplementation((callback) => Promise.resolve(callback({ data: null, error: null }))),
    };

    (createClient as jest.Mock).mockReturnValue(mockSupabaseClient);

    // Create query builder instance
    queryBuilder = new QueryBuilder<Database>(mockSupabaseClient);
  });

  describe('select', () => {
    it('should build a select query', async () => {
      mockSupabaseClient.then.mockImplementationOnce((callback) => 
        Promise.resolve(callback({ 
          data: { id: '123', name: 'Test', email: 'test@example.com' }, 
          error: null 
        }))
      );

      const result = await queryBuilder
        .from('profiles')
        .select('id, name, email')
        .eq('id', '123')
        .single();

      expect(mockSupabaseClient.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabaseClient.select).toHaveBeenCalledWith('id, name, email');
      expect(mockSupabaseClient.eq).toHaveBeenCalledWith('id', '123');
      expect(result).toEqual({ 
        data: { id: '123', name: 'Test', email: 'test@example.com' }, 
        error: null 
      });
    });
  });

  describe('insert', () => {
    it('should build an insert query', async () => {
      const data = {
        id: '123',
        name: 'Test User',
        email: 'test@example.com',
      };

      mockSupabaseClient.then.mockImplementationOnce((callback) => 
        Promise.resolve(callback({ 
          data: { ...data }, 
          error: null 
        }))
      );

      const result = await queryBuilder
        .from('profiles')
        .insert(data)
        .select()
        .single();

      expect(mockSupabaseClient.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabaseClient.insert).toHaveBeenCalledWith(data);
      expect(mockSupabaseClient.select).toHaveBeenCalled();
      expect(result).toEqual({ 
        data: { ...data }, 
        error: null 
      });
    });
  });

  describe('update', () => {
    it('should build an update query', async () => {
      const data = {
        name: 'Updated Name',
      };

      mockSupabaseClient.then.mockImplementationOnce((callback) => 
        Promise.resolve(callback({ 
          data: { id: '123', ...data }, 
          error: null 
        }))
      );

      const result = await queryBuilder
        .from('profiles')
        .update(data)
        .eq('id', '123')
        .select()
        .single();

      expect(mockSupabaseClient.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabaseClient.update).toHaveBeenCalledWith(data);
      expect(mockSupabaseClient.eq).toHaveBeenCalledWith('id', '123');
      expect(mockSupabaseClient.select).toHaveBeenCalled();
      expect(result).toEqual({ 
        data: { id: '123', ...data }, 
        error: null 
      });
    });
  });

  describe('delete', () => {
    it('should build a delete query', async () => {
      mockSupabaseClient.then.mockImplementationOnce((callback) => 
        Promise.resolve(callback({ 
          data: { id: '123' }, 
          error: null 
        }))
      );

      const result = await queryBuilder
        .from('profiles')
        .delete()
        .eq('id', '123')
        .select()
        .single();

      expect(mockSupabaseClient.from).toHaveBeenCalledWith('profiles');
      expect(mockSupabaseClient.delete).toHaveBeenCalled();
      expect(mockSupabaseClient.eq).toHaveBeenCalledWith('id', '123');
      expect(mockSupabaseClient.select).toHaveBeenCalled();
      expect(result).toEqual({ 
        data: { id: '123' }, 
        error: null 
      });
    });
  });

  describe('filtering', () => {
    it('should support various filter operators', async () => {
      mockSupabaseClient.then.mockImplementationOnce((callback) => 
        Promise.resolve(callback({ 
          data: [{ id: '123' }], 
          error: null 
        }))
      );

      const result = await queryBuilder
        .from('profiles')
        .select()
        .eq('id', '123')
        .neq('status', 'deleted')
        .gt('age', 18)
        .gte('created_at', '2024-01-01')
        .lt('points', 100)
        .lte('last_login', '2024-03-20')
        .like('name', '%John%')
        .ilike('email', '%@example.com')
        .in('role', ['admin', 'user'])
        .execute();

      expect(mockSupabaseClient.eq).toHaveBeenCalledWith('id', '123');
      expect(mockSupabaseClient.neq).toHaveBeenCalledWith('status', 'deleted');
      expect(mockSupabaseClient.gt).toHaveBeenCalledWith('age', 18);
      expect(mockSupabaseClient.gte).toHaveBeenCalledWith('created_at', '2024-01-01');
      expect(mockSupabaseClient.lt).toHaveBeenCalledWith('points', 100);
      expect(mockSupabaseClient.lte).toHaveBeenCalledWith('last_login', '2024-03-20');
      expect(mockSupabaseClient.like).toHaveBeenCalledWith('name', '%John%');
      expect(mockSupabaseClient.ilike).toHaveBeenCalledWith('email', '%@example.com');
      expect(mockSupabaseClient.in).toHaveBeenCalledWith('role', ['admin', 'user']);
      expect(result).toEqual({ 
        data: [{ id: '123' }], 
        error: null 
      });
    });
  });

  describe('pagination', () => {
    it('should support pagination', async () => {
      mockSupabaseClient.then.mockImplementationOnce((callback) => 
        Promise.resolve(callback({ 
          data: [{ id: '123' }], 
          error: null 
        }))
      );

      const result = await queryBuilder
        .from('profiles')
        .select()
        .order('created_at', { ascending: false })
        .limit(10)
        .offset(20)
        .execute();

      expect(mockSupabaseClient.order).toHaveBeenCalledWith('created_at', { ascending: false });
      expect(mockSupabaseClient.limit).toHaveBeenCalledWith(10);
      expect(mockSupabaseClient.offset).toHaveBeenCalledWith(20);
      expect(result).toEqual({ 
        data: [{ id: '123' }], 
        error: null 
      });
    });
  });

  describe('error handling', () => {
    it('should throw on error when configured', async () => {
      const error = { message: 'Test error', code: 'TEST_ERROR' };
      const mockQuery = {
        from: jest.fn().mockReturnThis(),
        select: jest.fn().mockReturnThis(),
        then: jest.fn().mockImplementation(() => Promise.resolve({ data: null, error })),
        throwOnError: jest.fn().mockReturnThis(),
      };

      mockSupabaseClient.from.mockReturnValue(mockQuery);

      await expect(
        queryBuilder
          .from('profiles')
          .select()
          .throwOnError()
          .execute()
      ).rejects.toEqual(error);

      expect(mockQuery.throwOnError).toHaveBeenCalled();
    });

    it('should not throw on error when not configured', async () => {
      const error = { message: 'Test error', code: 'TEST_ERROR' };
      const mockQuery = {
        from: jest.fn().mockReturnThis(),
        select: jest.fn().mockReturnThis(),
        then: jest.fn().mockImplementation(() => Promise.resolve({ data: null, error })),
      };

      mockSupabaseClient.from.mockReturnValue(mockQuery);

      const result = await queryBuilder
        .from('profiles')
        .select()
        .execute();

      expect(result).toEqual({ data: null, error });
    });
  });
}); 


================================================
FILE: src/pages/History.tsx
================================================

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '@/components/Header';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { MoreVertical, FileText, Download, Edit, Trash2 } from 'lucide-react';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { useToast } from "@/hooks/use-toast";

// Mock data for the history page
const historyItems = [
  {
    id: '1',
    candidateName: 'Sarah Johnson',
    originalFilename: 'sarah_johnson_cv.pdf',
    position: 'Senior Frontend Developer',
    processedAt: new Date('2023-06-10T14:30:00'),
    anonymous: true,
  },
  {
    id: '2',
    candidateName: 'Michael Chen',
    originalFilename: 'michael_chen_resume.docx',
    position: 'DevOps Engineer',
    processedAt: new Date('2023-06-08T09:15:00'),
    anonymous: false,
  },
  {
    id: '3',
    candidateName: 'Emily Rodriguez',
    originalFilename: 'emily_rodriguez_cv.pdf',
    position: 'Product Manager',
    processedAt: new Date('2023-06-05T16:45:00'),
    anonymous: true,
  },
  {
    id: '4',
    candidateName: 'James Wilson',
    originalFilename: 'james_wilson_resume.pdf',
    position: 'Full Stack Developer',
    processedAt: new Date('2023-06-01T11:20:00'),
    anonymous: false,
  },
];

const History: React.FC = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [items, setItems] = useState(historyItems);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<string | null>(null);

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-GB', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    });
  };

  const handleViewCV = (id: string) => {
    // In a real app, we would likely navigate to a detailed view page
    toast({
      title: "Viewing CV",
      description: `Navigating to CV viewer for ID: ${id}`,
    });
    navigate(`/preview?id=${id}`);
  };

  const handleExportCV = (id: string) => {
    // In a real app, this would trigger a document download
    toast({
      title: "Exporting CV",
      description: "Your document will download shortly",
    });
    // Mock download behavior
    setTimeout(() => {
      console.log(`Exported CV with ID: ${id}`);
    }, 1000);
  };

  const handleEditCV = (id: string) => {
    // Navigate to edit page
    toast({
      title: "Editing CV",
      description: `Opening editor for CV ID: ${id}`,
    });
    navigate(`/preview?id=${id}&edit=true`);
  };

  const confirmDelete = (id: string) => {
    setItemToDelete(id);
    setDeleteDialogOpen(true);
  };

  const handleDeleteCV = () => {
    if (!itemToDelete) return;
    
    // Filter out the deleted item
    setItems(items.filter(item => item.id !== itemToDelete));
    
    toast({
      title: "CV Deleted",
      description: "The CV has been removed from your history",
      variant: "destructive",
    });
    
    // Close the dialog
    setDeleteDialogOpen(false);
    setItemToDelete(null);
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      
      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">History</h1>
          <p className="text-gray-600 mb-6">View and manage your previously processed CVs</p>
          
          <div className="space-y-4">
            {items.map((item) => (
              <Card key={item.id} className="overflow-hidden">
                <CardContent className="p-0">
                  <div className="flex items-center p-4">
                    <div className="flex-shrink-0 mr-4">
                      <Avatar className="h-12 w-12">
                        <AvatarFallback className="bg-hireable-gradient text-white">
                          {item.candidateName.split(' ').map(n => n[0]).join('')}
                        </AvatarFallback>
                      </Avatar>
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <h2 className="text-lg font-semibold text-gray-900 truncate">
                        {item.anonymous ? '[Anonymous Candidate]' : item.candidateName}
                      </h2>
                      <div className="flex flex-col sm:flex-row sm:items-center text-sm text-gray-500">
                        <p className="truncate">{item.position}</p>
                        <span className="hidden sm:inline mx-2">•</span>
                        <p className="truncate">{item.originalFilename}</p>
                        <span className="hidden sm:inline mx-2">•</span>
                        <p>Processed: {formatDate(item.processedAt)}</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center ml-4 space-x-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="hidden sm:flex"
                        onClick={() => handleViewCV(item.id)}
                      >
                        <FileText className="h-4 w-4 mr-1" />
                        View
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="hidden sm:flex"
                        onClick={() => handleExportCV(item.id)}
                      >
                        <Download className="h-4 w-4 mr-1" />
                        Export
                      </Button>
                      
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreVertical className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuLabel>Actions</DropdownMenuLabel>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem 
                            className="sm:hidden"
                            onClick={() => handleViewCV(item.id)}
                          >
                            <FileText className="h-4 w-4 mr-2" />
                            View
                          </DropdownMenuItem>
                          <DropdownMenuItem 
                            className="sm:hidden"
                            onClick={() => handleExportCV(item.id)}
                          >
                            <Download className="h-4 w-4 mr-2" />
                            Export
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => handleEditCV(item.id)}>
                            <Edit className="h-4 w-4 mr-2" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem 
                            className="text-red-600"
                            onClick={() => confirmDelete(item.id)}
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
          
          {items.length === 0 && (
            <div className="text-center py-12">
              <h2 className="text-xl font-medium text-gray-700">No history yet</h2>
              <p className="text-gray-500 mt-2">
                You haven't processed any CVs yet. Upload a CV to get started.
              </p>
              <Button 
                className="mt-4 bg-hireable-gradient hover:opacity-90"
                onClick={() => navigate('/')}
              >
                Upload CV
              </Button>
            </div>
          )}
        </div>
      </main>
      
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete this CV from your history.
              This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteCV} className="bg-red-600 hover:bg-red-700">
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
      
      <footer className="border-t py-4 mt-8">
        <div className="container mx-auto px-4 text-sm text-gray-500 flex justify-between">
          <p>© 2023 Hireable. All rights reserved.</p>
          <div className="space-x-4">
            <a href="#" className="hover:text-gray-700">Privacy Policy</a>
            <a href="#" className="hover:text-gray-700">Terms of Service</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default History;



================================================
FILE: src/pages/Index.tsx
================================================

import { Navigate } from 'react-router-dom';

const Index = () => {
  return <Navigate to="/" replace />;
};

export default Index;



================================================
FILE: src/pages/NotFound.tsx
================================================

import React from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import Header from '@/components/Header';

const NotFound: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      
      <main className="flex-1 flex items-center justify-center">
        <div className="text-center max-w-md px-4">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">404</h1>
          <h2 className="text-2xl font-medium text-gray-800 mb-2">Page Not Found</h2>
          <p className="text-gray-600 mb-6">
            We couldn't find the page you're looking for. The page might have been moved or deleted.
          </p>
          <Link to="/">
            <Button className="bg-hireable-gradient hover:opacity-90">
              Back to Home
            </Button>
          </Link>
        </div>
      </main>
      
      <footer className="border-t py-4">
        <div className="container mx-auto px-4 text-sm text-gray-500 flex justify-between">
          <p>© 2023 Hireable. All rights reserved.</p>
          <div className="space-x-4">
            <a href="#" className="hover:text-gray-700">Privacy Policy</a>
            <a href="#" className="hover:text-gray-700">Terms of Service</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default NotFound;



================================================
FILE: src/pages/Preview.tsx
================================================
import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '@/components/Header';
import CVSection from '@/components/CVSection';
import CVPreview from '@/components/CVPreview';
import ChatEditor from '@/components/ChatEditor';
import { useCVContext } from '@/contexts/CVContext';
import { useRecruiterContext } from '@/contexts/RecruiterContext';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { 
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { DownloadCloud, MessageSquareText } from 'lucide-react';
import { 
  optimizeProfileStatement, 
  optimizeSkills, 
  optimizeAchievements,
  optimizeExperience,
  generateDocument 
} from '@/services/api';
import { toast } from '@/components/ui/use-toast';

const Preview: React.FC = () => {
  const [isOptimizingProfileStatement, setIsOptimizingProfileStatement] = useState(false);
  const [isOptimizingSkills, setIsOptimizingSkills] = useState(false);
  const [isOptimizingAchievements, setIsOptimizingAchievements] = useState(false);
  const [optimizingExperienceIndex, setOptimizingExperienceIndex] = useState<number | null>(null);
  const [isExporting, setIsExporting] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(false);
  
  const {
    cv,
    sectionVisibility,
    sectionOrder,
    isAnonymized,
    updateCvField,
    setSectionVisibility,
    setSectionOrder,
    setIsAnonymized,
  } = useCVContext();
  
  const { profile } = useRecruiterContext();
  const navigate = useNavigate();

  const moveSection = useCallback(
    (dragIndex: number, hoverIndex: number) => {
      const draggedSection = sectionOrder.sections[dragIndex];
      const newSections = [...sectionOrder.sections];
      newSections.splice(dragIndex, 1);
      newSections.splice(hoverIndex, 0, draggedSection);
      setSectionOrder(newSections);
    },
    [sectionOrder, setSectionOrder]
  );

  const handleOptimizeProfileStatement = async () => {
    if (!cv) return;
    
    setIsOptimizingProfileStatement(true);
    
    try {
      const response = await optimizeProfileStatement('mock-cv-id');
      
      if (response.status === 'success') {
        updateCvField('profileStatement', response.data.optimizedText);
        toast({
          title: "Profile statement optimized",
          description: response.data.feedback,
        });
      } else {
        throw new Error(response.errors?.[0] || 'Failed to optimize profile statement');
      }
    } catch (error) {
      toast({
        title: "Optimization failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsOptimizingProfileStatement(false);
    }
  };

  const handleOptimizeSkills = async () => {
    if (!cv) return;
    
    setIsOptimizingSkills(true);
    
    try {
      const response = await optimizeSkills('mock-cv-id');
      
      if (response.status === 'success') {
        updateCvField('skills', response.data.optimizedSkills);
        toast({
          title: "Skills optimized",
          description: response.data.feedback,
        });
      } else {
        throw new Error(response.errors?.[0] || 'Failed to optimize skills');
      }
    } catch (error) {
      toast({
        title: "Optimization failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsOptimizingSkills(false);
    }
  };

  const handleOptimizeAchievements = async () => {
    if (!cv) return;
    
    setIsOptimizingAchievements(true);
    
    try {
      const response = await optimizeAchievements('mock-cv-id');
      
      if (response.status === 'success') {
        updateCvField('achievements', response.data.optimizedAchievements);
        toast({
          title: "Achievements optimized",
          description: response.data.feedback,
        });
      } else {
        throw new Error(response.errors?.[0] || 'Failed to optimize achievements');
      }
    } catch (error) {
      toast({
        title: "Optimization failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsOptimizingAchievements(false);
    }
  };

  const handleOptimizeExperience = async (index: number) => {
    if (!cv) return;
    
    setOptimizingExperienceIndex(index);
    
    try {
      const response = await optimizeExperience('mock-cv-id', index);
      
      if (response.status === 'success') {
        const updatedExperiences = [...cv.experience];
        updatedExperiences[index] = {
          ...updatedExperiences[index],
          highlights: response.data.optimizedExperience.highlights,
        };
        
        updateCvField('experience', updatedExperiences);
        toast({
          title: "Experience optimized",
          description: response.data.feedback,
        });
      } else {
        throw new Error(response.errors?.[0] || 'Failed to optimize experience');
      }
    } catch (error) {
      toast({
        title: "Optimization failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setOptimizingExperienceIndex(null);
    }
  };

  const handleExport = async (format: 'PDF' | 'DOCX') => {
    if (!cv || !profile) return;
    
    setIsExporting(true);
    
    try {
      const documentUrl = await generateDocument(cv, format, profile);
      
      toast({
        title: `CV exported as ${format}`,
        description: "Your document has been generated successfully.",
      });
      
      // In a real app, we would trigger the download here
      window.open(documentUrl, '_blank');
    } catch (error) {
      toast({
        title: "Export failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  if (!cv) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <h2 className="text-xl font-medium text-gray-700">No CV data available</h2>
            <p className="text-gray-500 mt-2">Please upload a CV to preview and optimize it.</p>
            <Button 
              className="mt-4 bg-hireable-gradient hover:opacity-90"
              onClick={() => navigate('/')}
            >
              Upload CV
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      
      <main className="flex-1 container mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">CV Preview</h1>
            <p className="text-gray-600 text-sm">Drag sections to reorder • Click section icons to edit or hide</p>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="anonymize"
                checked={isAnonymized}
                onCheckedChange={setIsAnonymized}
              />
              <Label htmlFor="anonymize">Anonymize</Label>
            </div>
            
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" className="gap-2">
                  <DownloadCloud className="h-4 w-4" /> Export
                </Button>
              </SheetTrigger>
              <SheetContent>
                <SheetHeader>
                  <SheetTitle>Export CV</SheetTitle>
                  <SheetDescription>
                    Choose a format to export the CV. The document will be generated with your agency branding.
                  </SheetDescription>
                </SheetHeader>
                
                <div className="space-y-4 mt-6">
                  <Button
                    onClick={() => handleExport('PDF')}
                    className="w-full bg-hireable-gradient hover:opacity-90"
                    disabled={isExporting}
                  >
                    <DownloadCloud className="mr-2 h-4 w-4" /> 
                    {isExporting ? 'Generating...' : 'Export as PDF'}
                  </Button>
                  
                  <Button
                    onClick={() => handleExport('DOCX')}
                    variant="outline"
                    className="w-full"
                    disabled={isExporting}
                  >
                    <DownloadCloud className="mr-2 h-4 w-4" /> 
                    {isExporting ? 'Generating...' : 'Export as DOCX'}
                  </Button>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left column - Sections to drag and arrange */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-md shadow-sm p-4 mb-4">
              <div className="flex justify-between items-center mb-4">
                <h2 className="font-medium">CV Sections</h2>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsChatOpen(!isChatOpen)}
                  className="text-hireable-primary"
                >
                  <MessageSquareText className="h-4 w-4 mr-1" />
                  Edit with Chat
                </Button>
              </div>
              
              {isChatOpen && (
                <div className="mb-4">
                  <ChatEditor onClose={() => setIsChatOpen(false)} />
                </div>
              )}
              
              <div className="space-y-3">
                {sectionOrder.sections.map((sectionKey, index) => {
                  let sectionTitle = '';
                  let sectionContent = null;
                  let canOptimize = false;
                  const isVisible = sectionVisibility[sectionKey as keyof typeof sectionVisibility];
                  
                  switch(sectionKey) {
                    case 'personalInfo':
                      sectionTitle = 'Personal Information';
                      sectionContent = (
                        <div className="text-sm">
                          <p className="font-medium">Name</p>
                          <p className="text-gray-500">{isAnonymized ? '[Anonymized]' : `${cv.firstName || ''} ${cv.surname || ''}`}</p>
                          
                          <p className="font-medium mt-2">Contact</p>
                          <p className="text-gray-500">{isAnonymized ? '[Hidden]' : (cv.email || cv.phone || 'No contact info')}</p>
                        </div>
                      );
                      break;
                    
                    case 'profileStatement':
                      sectionTitle = 'Professional Summary';
                      canOptimize = true;
                      sectionContent = (
                        <p className="text-sm text-gray-600 line-clamp-3">{cv.profileStatement}</p>
                      );
                      break;
                    
                    case 'skills':
                      sectionTitle = 'Skills';
                      canOptimize = true;
                      sectionContent = (
                        <div className="flex flex-wrap gap-1">
                          {cv.skills.slice(0, 3).map((skill, idx) => (
                            <div key={idx} className="text-xs bg-gray-100 px-2 py-1 rounded">
                              {skill.name}
                            </div>
                          ))}
                          {cv.skills.length > 3 && (
                            <div className="text-xs bg-gray-100 px-2 py-1 rounded">
                              +{cv.skills.length - 3} more
                            </div>
                          )}
                        </div>
                      );
                      break;
                    
                    case 'experience':
                      sectionTitle = 'Work Experience';
                      sectionContent = (
                        <div className="space-y-2">
                          {cv.experience.map((exp, idx) => (
                            <div key={idx} className="text-sm">
                              <div className="flex justify-between">
                                <p className="font-medium">{exp.title}</p>
                                <Button
                                  variant="ghost" 
                                  size="sm"
                                  className="h-6 px-2 text-xs"
                                  onClick={() => handleOptimizeExperience(idx)}
                                  disabled={optimizingExperienceIndex === idx}
                                >
                                  {optimizingExperienceIndex === idx ? 'Optimizing...' : 'Optimize'}
                                </Button>
                              </div>
                              <p className="text-gray-500 text-xs">{exp.company}</p>
                            </div>
                          ))}
                        </div>
                      );
                      break;
                    
                    case 'achievements':
                      sectionTitle = 'Key Achievements';
                      canOptimize = true;
                      sectionContent = (
                        <ul className="text-sm text-gray-600 ml-4 list-disc">
                          {cv.achievements.slice(0, 2).map((achievement, idx) => (
                            <li key={idx} className="line-clamp-1">{achievement}</li>
                          ))}
                          {cv.achievements.length > 2 && (
                            <li className="text-gray-400">+{cv.achievements.length - 2} more achievements</li>
                          )}
                        </ul>
                      );
                      break;
                    
                    case 'education':
                      sectionTitle = 'Education';
                      sectionContent = (
                        <div className="text-sm">
                          {cv.education && cv.education.map((edu, idx) => (
                            <div key={idx} className="mb-1">
                              <p className="font-medium">{edu.institution}</p>
                              {edu.qualifications && edu.qualifications[0] && (
                                <p className="text-gray-500 text-xs">
                                  {edu.qualifications[0].qualification} in {edu.qualifications[0].course}
                                </p>
                              )}
                            </div>
                          ))}
                        </div>
                      );
                      break;
                    
                    default:
                      sectionTitle = sectionKey
                        .replace(/([A-Z])/g, ' $1')
                        .replace(/^./, str => str.toUpperCase());
                      sectionContent = (
                        <p className="text-sm text-gray-500">Section preview not available</p>
                      );
                  }
                  
                  return (
                    <CVSection
                      key={sectionKey}
                      id={sectionKey}
                      title={sectionTitle}
                      isVisible={isVisible}
                      onVisibilityToggle={() => setSectionVisibility(
                        sectionKey as keyof typeof sectionVisibility,
                        !isVisible
                      )}
                      onOptimize={
                        canOptimize
                          ? sectionKey === 'profileStatement'
                            ? handleOptimizeProfileStatement
                            : sectionKey === 'skills'
                              ? handleOptimizeSkills
                              : sectionKey === 'achievements'
                                ? handleOptimizeAchievements
                                : undefined
                          : undefined
                      }
                      isOptimizing={
                        (sectionKey === 'profileStatement' && isOptimizingProfileStatement) ||
                        (sectionKey === 'skills' && isOptimizingSkills) ||
                        (sectionKey === 'achievements' && isOptimizingAchievements)
                      }
                      index={index}
                      moveSection={moveSection}
                    >
                      {sectionContent}
                    </CVSection>
                  );
                })}
              </div>
            </div>
          </div>
          
          {/* Right column - CV Preview */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-md shadow-sm p-6">
              <CVPreview 
                cv={cv} 
                isAnonymized={isAnonymized} 
                sectionVisibility={sectionVisibility}
                sectionOrder={sectionOrder.sections}
              />
            </div>
          </div>
        </div>
      </main>
      
      <footer className="border-t py-4">
        <div className="container mx-auto px-4 text-sm text-gray-500 flex justify-between">
          <p>© 2023 Hireable. All rights reserved.</p>
          <div className="space-x-4">
            <a href="#" className="hover:text-gray-700">Privacy Policy</a>
            <a href="#" className="hover:text-gray-700">Terms of Service</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Preview;



================================================
FILE: src/pages/Profile.tsx
================================================

import React, { useState, useEffect } from 'react';
import Header from '@/components/Header';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { useRecruiterContext } from '@/contexts/RecruiterContext';
import { getRecruiterProfile, updateRecruiterProfile } from '@/services/api';
import { toast } from '@/components/ui/use-toast';

const Profile: React.FC = () => {
  const { profile, setProfile, updateProfileField, isLoading, setIsLoading } = useRecruiterContext();
  const [activeTab, setActiveTab] = useState('personal');
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    const fetchProfile = async () => {
      setIsLoading(true);
      try {
        const data = await getRecruiterProfile();
        setProfile(data);
      } catch (error) {
        toast({
          title: "Failed to load profile",
          description: "Your profile information could not be loaded. Please try again later.",
          variant: "destructive",
        });
        console.error(error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchProfile();
  }, [setProfile, setIsLoading]);

  const handleSave = async () => {
    if (!profile) return;
    
    setIsSaving(true);
    try {
      await updateRecruiterProfile(profile);
      toast({
        title: "Profile updated",
        description: "Your profile information has been saved successfully.",
      });
    } catch (error) {
      toast({
        title: "Update failed",
        description: "Failed to save your profile information. Please try again.",
        variant: "destructive",
      });
      console.error(error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleProfilePictureChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // In a real app, we would upload the file to a server here
    // For now, we'll just use a local URL
    const fileUrl = URL.createObjectURL(file);
    updateProfileField('profilePicture', fileUrl);
  };

  const handleAgencyLogoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // In a real app, we would upload the file to a server here
    // For now, we'll just use a local URL
    const fileUrl = URL.createObjectURL(file);
    updateProfileField('agencyLogo', fileUrl);
  };

  if (isLoading || !profile) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <h2 className="text-xl font-medium text-gray-700">Loading profile...</h2>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      
      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Profile Settings</h1>
          <p className="text-gray-600 mb-6">Manage your account and agency information</p>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            {/* Sidebar */}
            <div className="md:col-span-1">
              <div className="bg-white rounded-md shadow-sm">
                <div className="p-4 border-b">
                  <Button
                    variant={activeTab === 'personal' ? 'default' : 'ghost'}
                    className={`w-full justify-start ${
                      activeTab === 'personal' ? 'bg-hireable-primary hover:bg-hireable-dark' : ''
                    }`}
                    onClick={() => setActiveTab('personal')}
                  >
                    Personal Information
                  </Button>
                </div>
                <div className="p-4 border-b">
                  <Button
                    variant={activeTab === 'agency' ? 'default' : 'ghost'}
                    className={`w-full justify-start ${
                      activeTab === 'agency' ? 'bg-hireable-primary hover:bg-hireable-dark' : ''
                    }`}
                    onClick={() => setActiveTab('agency')}
                  >
                    Agency Details
                  </Button>
                </div>
                <div className="p-4">
                  <Button
                    variant={activeTab === 'security' ? 'default' : 'ghost'}
                    className={`w-full justify-start ${
                      activeTab === 'security' ? 'bg-hireable-primary hover:bg-hireable-dark' : ''
                    }`}
                    onClick={() => setActiveTab('security')}
                  >
                    Security
                  </Button>
                </div>
              </div>
            </div>
            
            {/* Main Content */}
            <div className="md:col-span-3">
              <Tabs value={activeTab} onValueChange={setActiveTab}>
                <TabsContent value="personal" className="mt-0">
                  <Card>
                    <CardContent className="pt-6">
                      <h2 className="text-xl font-semibold mb-6">Personal Information</h2>
                      
                      <div className="flex flex-col items-start mb-6">
                        <Label className="mb-2">Profile Picture</Label>
                        <div className="flex items-center gap-4">
                          <Avatar className="h-20 w-20">
                            <AvatarImage src={profile.profilePicture} />
                            <AvatarFallback className="bg-hireable-gradient text-2xl text-white">
                              {profile.firstName.charAt(0)}{profile.lastName.charAt(0)}
                            </AvatarFallback>
                          </Avatar>
                          
                          <div>
                            <Button
                              variant="outline"
                              className="mb-2"
                              onClick={() => document.getElementById('profile-picture')?.click()}
                            >
                              Change Photo
                            </Button>
                            <input
                              id="profile-picture"
                              type="file"
                              accept="image/*"
                              className="hidden"
                              onChange={handleProfilePictureChange}
                            />
                            <p className="text-xs text-gray-500">Recommended: Square image, at least 400x400px</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div className="space-y-2">
                          <Label htmlFor="first-name">First Name</Label>
                          <Input 
                            id="first-name" 
                            value={profile.firstName} 
                            onChange={(e) => updateProfileField('firstName', e.target.value)} 
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="last-name">Last Name</Label>
                          <Input 
                            id="last-name" 
                            value={profile.lastName} 
                            onChange={(e) => updateProfileField('lastName', e.target.value)} 
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-2 mb-6">
                        <Label htmlFor="email">Email Address</Label>
                        <Input 
                          id="email" 
                          type="email"
                          value={profile.email} 
                          onChange={(e) => updateProfileField('email', e.target.value)} 
                        />
                        <p className="text-xs text-gray-500">Changing email will require confirmation from your current email address</p>
                      </div>
                      
                      <div className="space-y-2 mb-6">
                        <Label htmlFor="phone">Phone Number</Label>
                        <Input 
                          id="phone" 
                          value={profile.phone} 
                          onChange={(e) => updateProfileField('phone', e.target.value)} 
                          placeholder="+44 123 456 7890"
                        />
                      </div>
                      
                      <Button 
                        className="bg-hireable-gradient hover:opacity-90" 
                        onClick={handleSave} 
                        disabled={isSaving}
                      >
                        {isSaving ? 'Saving...' : 'Save Changes'}
                      </Button>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="agency" className="mt-0">
                  <Card>
                    <CardContent className="pt-6">
                      <h2 className="text-xl font-semibold mb-6">Agency Details</h2>
                      
                      <div className="space-y-2 mb-6">
                        <Label htmlFor="agency-name">Agency Name</Label>
                        <Input 
                          id="agency-name" 
                          value={profile.agencyName} 
                          onChange={(e) => updateProfileField('agencyName', e.target.value)} 
                        />
                      </div>
                      
                      <div className="flex flex-col items-start mb-6">
                        <Label className="mb-2">Agency Logo</Label>
                        <div className="flex items-center gap-4">
                          <div className="h-20 w-32 bg-gray-100 rounded-md flex items-center justify-center overflow-hidden border">
                            {profile.agencyLogo ? (
                              <img 
                                src={profile.agencyLogo} 
                                alt="Agency Logo" 
                                className="max-h-full max-w-full object-contain" 
                              />
                            ) : (
                              <div className="text-gray-400 text-sm">No logo</div>
                            )}
                          </div>
                          
                          <div>
                            <Button
                              variant="outline"
                              className="mb-2"
                              onClick={() => document.getElementById('agency-logo')?.click()}
                            >
                              Upload Logo
                            </Button>
                            <input
                              id="agency-logo"
                              type="file"
                              accept="image/*"
                              className="hidden"
                              onChange={handleAgencyLogoChange}
                            />
                            <p className="text-xs text-gray-500">Logo will appear on your branded CV exports</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="space-y-2 mb-6">
                        <Label htmlFor="website">Website</Label>
                        <Input 
                          id="website" 
                          value={profile.website || ''} 
                          onChange={(e) => updateProfileField('website', e.target.value)} 
                          placeholder="https://your-agency.com"
                        />
                      </div>
                      
                      <Button 
                        className="bg-hireable-gradient hover:opacity-90" 
                        onClick={handleSave} 
                        disabled={isSaving}
                      >
                        {isSaving ? 'Saving...' : 'Save Changes'}
                      </Button>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="security" className="mt-0">
                  <Card>
                    <CardContent className="pt-6">
                      <h2 className="text-xl font-semibold mb-6">Security</h2>
                      
                      <div className="space-y-2 mb-4">
                        <Label htmlFor="current-password">Current Password</Label>
                        <Input id="current-password" type="password" />
                      </div>
                      
                      <div className="space-y-2 mb-4">
                        <Label htmlFor="new-password">New Password</Label>
                        <Input id="new-password" type="password" />
                      </div>
                      
                      <div className="space-y-2 mb-6">
                        <Label htmlFor="confirm-password">Confirm New Password</Label>
                        <Input id="confirm-password" type="password" />
                      </div>
                      
                      <Button className="bg-hireable-gradient hover:opacity-90">
                        Update Password
                      </Button>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>
          </div>
        </div>
      </main>
      
      <footer className="border-t py-4 mt-8">
        <div className="container mx-auto px-4 text-sm text-gray-500 flex justify-between">
          <p>© 2023 Hireable. All rights reserved.</p>
          <div className="space-x-4">
            <a href="#" className="hover:text-gray-700">Privacy Policy</a>
            <a href="#" className="hover:text-gray-700">Terms of Service</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Profile;



================================================
FILE: src/pages/Settings.tsx
================================================
import React, { useState, useRef, useCallback, useEffect } from 'react';
import Header from '@/components/Header';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Card, CardContent } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { GripVertical, Eye, EyeOff, Loader2 } from 'lucide-react';
import { useSettingsContext } from '@/contexts/SettingsContext';
import { useDrag, useDrop } from 'react-dnd';
import type { Identifier, XYCoord } from 'dnd-core';

interface DragItem {
  index: number;
  id: string;
  type: string;
}

interface SectionItemProps {
  id: string;
  text: string;
  index: number;
  isVisible: boolean;
  moveSection: (dragIndex: number, hoverIndex: number) => void;
  toggleVisibility: (key: string) => void;
}

const SectionItem = ({ id, text, index, isVisible, moveSection, toggleVisibility }: SectionItemProps) => {
  const ref = useRef<HTMLDivElement>(null);
  
  const [{ handlerId }, drop] = useDrop<
    DragItem,
    void,
    { handlerId: Identifier | null }
  >({
    accept: 'section',
    collect(monitor) {
      return {
        handlerId: monitor.getHandlerId(),
      };
    },
    hover(item: DragItem, monitor) {
      if (!ref.current) {
        return;
      }
      const dragIndex = item.index;
      const hoverIndex = index;

      // Don't replace items with themselves
      if (dragIndex === hoverIndex) {
        return;
      }

      // Determine rectangle on screen
      const hoverBoundingRect = ref.current?.getBoundingClientRect();

      // Get vertical middle
      const hoverMiddleY =
        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

      // Determine mouse position
      const clientOffset = monitor.getClientOffset();

      // Get pixels to the top
      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;

      // Only perform the move when the mouse has crossed half of the items height
      // When dragging downwards, only move when the cursor is below 50%
      // When dragging upwards, only move when the cursor is above 50%

      // Dragging downwards
      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
        return;
      }

      // Dragging upwards
      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
        return;
      }

      // Time to actually perform the action
      moveSection(dragIndex, hoverIndex);

      // Note: we're mutating the monitor item here!
      // Generally it's better to avoid mutations,
      // but it's good here for the sake of performance
      // to avoid expensive index searches.
      item.index = hoverIndex;
    },
  });

  const [{ isDragging }, drag] = useDrag({
    type: 'section',
    item: () => {
      return { id, index };
    },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  drag(drop(ref));

  return (
    <div
      ref={ref}
      className={`flex items-center justify-between p-3 border rounded-md bg-white mb-2 ${
        isDragging ? 'opacity-50 border-dashed border-2 border-gray-400 bg-gray-50' : ''
      }`}
      data-handler-id={handlerId}
    >
      <div className="flex items-center">
        <div className="cursor-move px-1 mr-2">
          <GripVertical className="h-5 w-5 text-gray-400" />
        </div>
        <Label htmlFor={`section-${id}`} className="font-medium">
          {text}
        </Label>
      </div>
      
      <div className="flex items-center space-x-4">
        <div className="flex items-center space-x-2">
          <button
            className="text-gray-500 hover:text-gray-700"
            onClick={() => toggleVisibility(id)}
          >
            {isVisible ? (
              <Eye className="h-4 w-4" />
            ) : (
              <EyeOff className="h-4 w-4" />
            )}
          </button>
        </div>
        
        <Switch
          id={`section-${id}`}
          checked={isVisible}
          onCheckedChange={() => toggleVisibility(id)}
        />
      </div>
    </div>
  );
};

const Settings: React.FC = () => {
  const { settings, updateSettings, setSectionVisibility, setSectionOrder, saveSettings, isLoading, error } = useSettingsContext();
  const [activeTab, setActiveTab] = useState('sections');
  const [isSaving, setIsSaving] = useState(false);
  const [sections, setSections] = useState([
    { key: 'personalInfo', label: 'Personal Information' },
    { key: 'profileStatement', label: 'Professional Summary' },
    { key: 'skills', label: 'Skills' },
    { key: 'experience', label: 'Work Experience' },
    { key: 'education', label: 'Education' },
    { key: 'achievements', label: 'Key Achievements' },
    { key: 'certifications', label: 'Certifications' },
    { key: 'languages', label: 'Languages' },
    { key: 'professionalMemberships', label: 'Professional Memberships' },
    { key: 'publications', label: 'Publications' },
    { key: 'earlierCareer', label: 'Earlier Career' },
    { key: 'additionalDetails', label: 'Additional Details' },
  ]);

  useEffect(() => {
    if (settings?.defaultSectionOrder?.sections) {
      const orderedSections = [...sections];
      
      orderedSections.sort((a, b) => {
        const aIndex = settings.defaultSectionOrder.sections.indexOf(a.key);
        const bIndex = settings.defaultSectionOrder.sections.indexOf(b.key);
        return aIndex - bIndex;
      });
      
      setSections(orderedSections);
    }
  }, [settings?.defaultSectionOrder]);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await saveSettings();
    } finally {
      setIsSaving(false);
    }
  };

  const handleExportFormatChange = (format: 'PDF' | 'DOCX') => {
    console.log('Changing export format to:', format);
    updateSettings({ defaultExportFormat: format });
  };

  const moveSection = useCallback((dragIndex: number, hoverIndex: number) => {
    setSections((prevSections) => {
      const newSections = [...prevSections];
      const [removed] = newSections.splice(dragIndex, 1);
      newSections.splice(hoverIndex, 0, removed);
      return newSections;
    });
  }, []);

  const toggleSectionVisibility = (key: string) => {
    setSectionVisibility(
      key as keyof typeof settings.defaultSectionVisibility,
      !settings.defaultSectionVisibility[key as keyof typeof settings.defaultSectionVisibility]
    );
  };

  const saveSectionOrder = () => {
    console.log('Saving section order:', sections);
    const sectionKeys = sections.map(section => section.key);
    setSectionOrder(sectionKeys);
    handleSave();
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin mx-auto text-hireable-primary mb-4" />
            <h2 className="text-xl font-medium text-gray-700">Loading settings...</h2>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <h2 className="text-xl font-medium text-gray-700 mb-4">Error Loading Settings</h2>
            <p className="text-red-500">{error}</p>
            <Button 
              onClick={() => window.location.reload()} 
              className="mt-4 bg-hireable-primary hover:bg-hireable-dark"
            >
              Retry
            </Button>
          </div>
        </div>
      </div>
    );
  }

  if (!settings || !settings.defaultSectionVisibility) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin mx-auto text-hireable-primary mb-4" />
            <h2 className="text-xl font-medium text-gray-700">Initializing settings...</h2>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      
      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Settings</h1>
          <p className="text-gray-600 mb-6">Configure your default CV processing preferences</p>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="md:col-span-1">
              <div className="bg-white rounded-md shadow-sm">
                <div className="p-4 border-b">
                  <Button
                    variant={activeTab === 'sections' ? 'default' : 'ghost'}
                    className={`w-full justify-start ${
                      activeTab === 'sections' ? 'bg-hireable-primary hover:bg-hireable-dark' : ''
                    }`}
                    onClick={() => setActiveTab('sections')}
                  >
                    CV Sections
                  </Button>
                </div>
                <div className="p-4 border-b">
                  <Button
                    variant={activeTab === 'anonymization' ? 'default' : 'ghost'}
                    className={`w-full justify-start ${
                      activeTab === 'anonymization' ? 'bg-hireable-primary hover:bg-hireable-dark' : ''
                    }`}
                    onClick={() => setActiveTab('anonymization')}
                  >
                    Anonymization
                  </Button>
                </div>
                <div className="p-4">
                  <Button
                    variant={activeTab === 'export' ? 'default' : 'ghost'}
                    className={`w-full justify-start ${
                      activeTab === 'export' ? 'bg-hireable-primary hover:bg-hireable-dark' : ''
                    }`}
                    onClick={() => setActiveTab('export')}
                  >
                    Export Format
                  </Button>
                </div>
              </div>
            </div>
            
            <div className="md:col-span-3">
              <Tabs value={activeTab} onValueChange={setActiveTab}>
                <TabsContent value="sections" className="mt-0">
                  <Card>
                    <CardContent className="pt-6">
                      <div className="flex justify-between items-center mb-4">
                        <h2 className="text-xl font-semibold">CV Section Arrangement</h2>
                        <Button 
                          className="bg-gray-900 hover:bg-gray-800"
                          onClick={saveSectionOrder}
                          disabled={isSaving}
                        >
                          {isSaving ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Saving...
                            </>
                          ) : (
                            'Save Order'
                          )}
                        </Button>
                      </div>
                      
                      <div className="space-y-2">
                        {sections.map((section, index) => (
                          <SectionItem
                            key={section.key}
                            id={section.key}
                            text={section.label}
                            index={index}
                            isVisible={settings.defaultSectionVisibility[section.key as keyof typeof settings.defaultSectionVisibility]}
                            moveSection={moveSection}
                            toggleVisibility={toggleSectionVisibility}
                          />
                        ))}
                      </div>
                      
                      <Button 
                        className="mt-6 bg-gradient-to-r from-hireable-secondary to-hireable-primary hover:opacity-90" 
                        onClick={handleSave}
                        disabled={isSaving}
                      >
                        {isSaving ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          'Save All Settings'
                        )}
                      </Button>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="anonymization" className="mt-0">
                  <Card>
                    <CardContent className="pt-6">
                      <h2 className="text-xl font-semibold mb-6">Default Anonymization Settings</h2>
                      
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label htmlFor="auto-anonymize">Auto-anonymize all CVs</Label>
                            <p className="text-sm text-gray-500">
                              Automatically remove personal information from uploaded CVs
                            </p>
                          </div>
                          <Switch
                            id="auto-anonymize"
                            checked={settings.defaultAnonymize}
                            onCheckedChange={(checked) => updateSettings({ defaultAnonymize: checked })}
                          />
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <div className="space-y-0.5">
                            <Label htmlFor="keep-original">Keep original files</Label>
                            <p className="text-sm text-gray-500">
                              Store original CV files alongside anonymized versions
                            </p>
                          </div>
                          <Switch
                            id="keep-original"
                            checked={settings.keepOriginalFiles}
                            onCheckedChange={(checked) => updateSettings({ keepOriginalFiles: checked })}
                          />
                        </div>
                      </div>
                      
                      <Button 
                        className="mt-6 bg-gradient-to-r from-hireable-secondary to-hireable-primary hover:opacity-90" 
                        onClick={handleSave}
                        disabled={isSaving}
                      >
                        {isSaving ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          'Save All Settings'
                        )}
                      </Button>
                    </CardContent>
                  </Card>
                </TabsContent>
                
                <TabsContent value="export" className="mt-0">
                  <Card>
                    <CardContent className="pt-6">
                      <h2 className="text-xl font-semibold mb-6">Default Export Format</h2>
                      
                      <div className="flex items-center space-x-4">
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="pdf-format"
                            checked={settings.defaultExportFormat === 'PDF'}
                            onCheckedChange={() => handleExportFormatChange('PDF')}
                          />
                          <Label htmlFor="pdf-format">PDF</Label>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Checkbox
                            id="docx-format"
                            checked={settings.defaultExportFormat === 'DOCX'}
                            onCheckedChange={() => handleExportFormatChange('DOCX')}
                          />
                          <Label htmlFor="docx-format">DOCX</Label>
                        </div>
                      </div>
                      
                      <p className="text-sm text-gray-500 mt-2">
                        Select your preferred export format(s) for processed CVs
                      </p>
                      
                      <Button 
                        className="mt-6 bg-gradient-to-r from-hireable-secondary to-hireable-primary hover:opacity-90" 
                        onClick={handleSave}
                        disabled={isSaving}
                      >
                        {isSaving ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Saving...
                          </>
                        ) : (
                          'Save All Settings'
                        )}
                      </Button>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>
          </div>
        </div>
      </main>
      
      <footer className="border-t py-4 mt-8">
        <div className="container mx-auto px-4 text-sm text-gray-500 flex justify-between">
          <p>© 2023 Hireable. All rights reserved.</p>
          <div className="space-x-4">
            <a href="#" className="hover:text-gray-700">Privacy Policy</a>
            <a href="#" className="hover:text-gray-700">Terms of Service</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Settings;



================================================
FILE: src/pages/Upload.tsx
================================================

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '@/components/Header';
import FileUpload from '@/components/FileUpload';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UploadIcon, FileText, UserCheck } from 'lucide-react';
import { useCVContext } from '@/contexts/CVContext';
import { useSettingsContext } from '@/contexts/SettingsContext';
import { uploadCV } from '@/services/api';
import { toast } from '@/components/ui/use-toast';
import { Checkbox } from '@/components/ui/checkbox';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';

const UploadPage: React.FC = () => {
  const [cvFile, setCvFile] = useState<File | null>(null);
  const [jdFile, setJdFile] = useState<File | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [matchToJD, setMatchToJD] = useState(false);
  const { setCv, setIsLoading: setCvIsLoading, setSectionVisibility, setSectionOrder, setIsAnonymized } = useCVContext();
  const { settings } = useSettingsContext();
  const navigate = useNavigate();

  const handleCvUpload = (file: File) => {
    setCvFile(file);
  };

  const handleJdUpload = (file: File) => {
    setJdFile(file);
  };

  const handleSubmit = async () => {
    if (!cvFile) {
      toast({
        title: "Please upload a CV",
        description: "A CV file is required to proceed.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setCvIsLoading(true);

    try {
      // In a real app, we would upload the file to a server here
      const response = await uploadCV(cvFile, matchToJD ? jdFile : null);
      
      if (response.status === 'success') {
        // Apply default settings from SettingsContext
        if (settings) {
          // Apply visibility settings
          if (settings.defaultSectionVisibility) {
            Object.entries(settings.defaultSectionVisibility).forEach(([section, isVisible]) => {
              setSectionVisibility(section as any, isVisible);
            });
          }
          
          // Apply section order
          if (settings.defaultSectionOrder && settings.defaultSectionOrder.sections) {
            setSectionOrder(settings.defaultSectionOrder.sections);
          }
          
          // Apply anonymization setting
          setIsAnonymized(settings.defaultAnonymize || false);
        }
        
        // Set the CV data
        setCv(response.data);
        
        toast({
          title: "CV uploaded successfully",
          description: "Your CV has been processed.",
        });
        navigate('/preview');
      } else {
        throw new Error(response.errors?.[0] || 'Failed to process CV');
      }
    } catch (error) {
      toast({
        title: "Upload failed",
        description: error instanceof Error ? error.message : "An unknown error occurred",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      setCvIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <Header />
      
      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-2xl font-bold text-gray-900 mb-1 text-center">Upload CV/Resume</h1>
          <p className="text-gray-600 mb-8 text-center">
            Upload your CV file and we'll automatically process, anonymize, and format it for you.
          </p>
          
          <div className="mb-8">
            <h2 className="text-lg font-medium text-gray-800 mb-3">CV/Resume File</h2>
            <FileUpload 
              onFileSelected={handleCvUpload} 
              isLoading={isLoading} 
              label="Upload CV"
              accept=".pdf,.doc,.docx"
            />
          </div>
          
          <div className="mb-8">
            <div className="flex items-center space-x-2 mb-4">
              <Checkbox 
                id="matchToJD" 
                checked={matchToJD}
                onCheckedChange={(checked) => setMatchToJD(checked === true)}
              />
              <label
                htmlFor="matchToJD"
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                Match to Job Description?
              </label>
            </div>
            
            {matchToJD && (
              <div>
                <h2 className="text-lg font-medium text-gray-800 mb-3">Job Description</h2>
                <p className="text-sm text-gray-500 mb-3">
                  Adding a job description allows our AI to optimize the CV specifically for this role.
                </p>
                <FileUpload 
                  onFileSelected={handleJdUpload} 
                  isLoading={isLoading} 
                  label="Upload Job Description"
                  accept=".pdf,.doc,.docx,.txt"
                />
              </div>
            )}
          </div>
          
          <Button 
            onClick={handleSubmit} 
            disabled={!cvFile || isLoading}
            className="w-full py-6 text-lg bg-hireable-gradient hover:opacity-90"
          >
            <UploadIcon className="mr-2 h-5 w-5" /> Upload & Process
          </Button>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-10">
            <Card>
              <CardContent className="pt-6">
                <div className="flex flex-col items-center text-center">
                  <div className="bg-purple-100 p-3 rounded-full mb-3">
                    <UserCheck className="h-6 w-6 text-hireable-primary" />
                  </div>
                  <h3 className="font-medium mb-2">Auto Anonymization</h3>
                  <p className="text-sm text-gray-500">
                    Automatically removes personal information for unbiased recruitment
                  </p>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="pt-6">
                <div className="flex flex-col items-center text-center">
                  <div className="bg-purple-100 p-3 rounded-full mb-3">
                    <FileText className="h-6 w-6 text-hireable-primary" />
                  </div>
                  <h3 className="font-medium mb-2">Smart Formatting</h3>
                  <p className="text-sm text-gray-500">
                    Consistently formats CVs to your agency's template
                  </p>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="pt-6">
                <div className="flex flex-col items-center text-center">
                  <div className="bg-purple-100 p-3 rounded-full mb-3">
                    <UploadIcon className="h-6 w-6 text-hireable-primary" />
                  </div>
                  <h3 className="font-medium mb-2">Instant Processing</h3>
                  <p className="text-sm text-gray-500">
                    Process multiple CVs in seconds, not hours
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      
      <footer className="border-t py-4">
        <div className="container mx-auto px-4 text-sm text-gray-500 flex justify-between">
          <p>© 2023 Hireable. All rights reserved.</p>
          <div className="space-x-4">
            <a href="#" className="hover:text-gray-700">Privacy Policy</a>
            <a href="#" className="hover:text-gray-700">Terms of Service</a>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default UploadPage;



================================================
FILE: src/pages/Auth/EmailLogin.tsx
================================================

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, Loader2 } from 'lucide-react';

const EmailLogin = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { signInWithEmail } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await signInWithEmail(email, password);
      navigate('/');
    } catch (error) {
      console.error('Login failed:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-background p-4">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center">
          <Button 
            onClick={() => navigate('/auth/login')} 
            variant="ghost" 
            className="absolute left-4 top-4"
            size="icon"
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div className="w-12 h-12 mx-auto rounded bg-hireable-gradient flex items-center justify-center mb-6">
            <span className="text-white font-bold text-2xl">H</span>
          </div>
          <CardTitle className="text-3xl font-bold">Sign in with Email</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="password">Password</Label>
                <Link to="/auth/forgot-password" className="text-sm text-primary">
                  Forgot password?
                </Link>
              </div>
              <Input
                id="password"
                type="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Signing in...
                </>
              ) : (
                'Sign in'
              )}
            </Button>
          </form>
        </CardContent>
        <CardFooter className="justify-center">
          <div>
            Don't have an account? <Link to="/auth/signup" className="text-primary font-medium">Sign up</Link>
          </div>
        </CardFooter>
      </Card>
    </div>
  );
};

export default EmailLogin;



================================================
FILE: src/pages/Auth/ForgotPassword.tsx
================================================

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { ArrowLeft, Loader2 } from 'lucide-react';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [sent, setSent] = useState(false);
  const { resetPassword } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      await resetPassword(email);
      setSent(true);
    } catch (error) {
      console.error('Password reset failed:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-background p-4">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center">
          <Button 
            onClick={() => navigate('/auth/login')} 
            variant="ghost" 
            className="absolute left-4 top-4"
            size="icon"
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div className="w-12 h-12 mx-auto rounded bg-hireable-gradient flex items-center justify-center mb-6">
            <span className="text-white font-bold text-2xl">H</span>
          </div>
          <CardTitle className="text-3xl font-bold">Reset password</CardTitle>
          <CardDescription>
            Enter your email and we'll send you a link to reset your password
          </CardDescription>
        </CardHeader>
        <CardContent>
          {sent ? (
            <div className="text-center space-y-4">
              <div className="bg-green-50 text-green-700 p-4 rounded-md">
                Password reset email sent! Check your inbox for instructions.
              </div>
              <Button
                className="mt-4"
                onClick={() => navigate('/auth/login')}
              >
                Return to sign in
              </Button>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
              </div>
              <Button type="submit" className="w-full" disabled={loading}>
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Sending...
                  </>
                ) : (
                  'Send reset link'
                )}
              </Button>
            </form>
          )}
        </CardContent>
        <CardFooter className="justify-center">
          <div>
            Remember your password? <Link to="/auth/login" className="text-primary font-medium">Sign in</Link>
          </div>
        </CardFooter>
      </Card>
    </div>
  );
};

export default ForgotPassword;



================================================
FILE: src/pages/Auth/index.tsx
================================================
import { Navigate, Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

const AuthLayout = () => {
  const { user, loading } = useAuth();
  const location = useLocation();

  // When the auth state is still loading, show nothing
  if (loading) {
    return <div className="flex items-center justify-center min-h-screen">Loading...</div>;
  }

  // If the user is already authenticated, redirect to home
  if (user) {
    return <Navigate to="/" replace />;
  }

  // Otherwise, render the Auth page content
  return <Outlet />;
};

export default AuthLayout;



================================================
FILE: src/pages/Auth/Login.tsx
================================================

import React, { useState } from 'react';
import { useNavigate, useLocation, Link } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Loader2 } from 'lucide-react';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { signInWithEmail, signInWithGoogle, signInWithLinkedIn } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  
  // Get the return URL from location state or default to home
  const from = location.state?.from?.pathname || '/';

  const handleEmailSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await signInWithEmail(email, password);
      navigate(from, { replace: true });
    } catch (error) {
      console.error('Login failed:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    try {
      await signInWithGoogle();
      // Navigation handled by auth redirect
    } catch (error) {
      console.error('Google sign in failed:', error);
    }
  };

  const handleLinkedInSignIn = async () => {
    try {
      await signInWithLinkedIn();
      // Navigation handled by auth redirect
    } catch (error) {
      console.error('LinkedIn sign in failed:', error);
    }
  };

  const handleContinueWithEmail = () => {
    navigate('/auth/email');
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-background p-4">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center">
          <div className="w-12 h-12 mx-auto rounded bg-hireable-gradient flex items-center justify-center mb-6">
            <span className="text-white font-bold text-2xl">H</span>
          </div>
          <CardTitle className="text-3xl font-bold">Login to Hireable</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Button 
            className="w-full flex items-center justify-center gap-2" 
            variant="outline"
            onClick={handleLinkedInSignIn}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#0A66C2">
              <path d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69 1.69 0 0 0-1.69 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z" />
            </svg>
            Sign in with LinkedIn
          </Button>
          
          <Button 
            className="w-full flex items-center justify-center gap-2" 
            variant="outline"
            onClick={handleGoogleSignIn}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
              <path fill="#EA4335" d="M5.26620003,9.76452941 C6.19878754,6.93863203 8.85444915,4.90909091 12,4.90909091 C13.6909091,4.90909091 15.2181818,5.50909091 16.4181818,6.49090909 L19.9090909,3 C17.7818182,1.14545455 15.0545455,0 12,0 C7.27006974,0 3.1977497,2.69829785 1.23999023,6.65002441 L5.26620003,9.76452941 Z" />
              <path fill="#34A853" d="M16.0407269,18.0125889 C14.9509167,18.7163016 13.5660892,19.0909091 12,19.0909091 C8.86648613,19.0909091 6.21911939,17.076871 5.27698177,14.2678769 L1.23746264,17.3349879 C3.19279051,21.2936293 7.26500293,24 12,24 C14.9328362,24 17.7353462,22.9573905 19.834192,20.9995801 L16.0407269,18.0125889 Z" />
              <path fill="#4A90E2" d="M19.834192,20.9995801 C22.0291676,18.9520994 23.4545455,15.903663 23.4545455,12 C23.4545455,11.2909091 23.3454545,10.5272727 23.1818182,9.81818182 L12,9.81818182 L12,14.4545455 L18.4363636,14.4545455 C18.1187732,16.013626 17.2662994,17.2212117 16.0407269,18.0125889 L19.834192,20.9995801 Z" />
              <path fill="#FBBC05" d="M5.27698177,14.2678769 C5.03832634,13.556323 4.90909091,12.7937589 4.90909091,12 C4.90909091,11.2182781 5.03443647,10.4668121 5.26620003,9.76452941 L1.23999023,6.65002441 C0.43658717,8.26043162 0,10.0753848 0,12 C0,13.9195484 0.444780743,15.7301709 1.23746264,17.3349879 L5.27698177,14.2678769 Z" />
            </svg>
            Sign in with Google
          </Button>
          
          <div className="relative flex items-center justify-center py-4">
            <Separator className="absolute" />
            <span className="bg-background px-2 text-sm text-muted-foreground z-10">OR</span>
          </div>
          
          <Button 
            className="w-full" 
            variant="outline"
            onClick={handleContinueWithEmail}
          >
            Continue with Email
          </Button>
        </CardContent>
        <CardFooter className="flex justify-center flex-col text-center gap-2">
          <div>
            Don't have an account yet? <Link to="/auth/signup" className="text-primary font-medium">Sign up</Link>
          </div>
          <Link to="/auth/forgot-password" className="text-muted-foreground hover:text-foreground text-sm">
            Forgotten your password?
          </Link>
        </CardFooter>
      </Card>
    </div>
  );
};

export default Login;



================================================
FILE: src/pages/Auth/SignUp.tsx
================================================

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, Loader2 } from 'lucide-react';

const SignUp = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const { signUp } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (password !== confirmPassword) {
      setError("Passwords don't match");
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      await signUp(email, password);
      // Stay on the same page, as the toast will inform about email verification
    } catch (error: any) {
      console.error('Signup failed:', error);
      setError(error.message || 'Failed to sign up');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-background p-4">
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center">
          <Button 
            onClick={() => navigate('/auth/login')} 
            variant="ghost" 
            className="absolute left-4 top-4"
            size="icon"
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div className="w-12 h-12 mx-auto rounded bg-hireable-gradient flex items-center justify-center mb-6">
            <span className="text-white font-bold text-2xl">H</span>
          </div>
          <CardTitle className="text-3xl font-bold">Create account</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="Create a password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirm-password">Confirm Password</Label>
              <Input
                id="confirm-password"
                type="password"
                placeholder="Confirm your password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
            </div>
            {error && (
              <div className="text-red-500 text-sm">{error}</div>
            )}
            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating account...
                </>
              ) : (
                'Create account'
              )}
            </Button>
          </form>
        </CardContent>
        <CardFooter className="justify-center">
          <div>
            Already have an account? <Link to="/auth/login" className="text-primary font-medium">Sign in</Link>
          </div>
        </CardFooter>
      </Card>
    </div>
  );
};

export default SignUp;



================================================
FILE: src/services/api.ts
================================================

import { CV, BackendResponse, RecruiterProfile, AppSettings } from '@/types/cv';

// This is a mock implementation since we don't have the actual backend yet
// In a real implementation, these would make API calls to the backend services

export async function uploadCV(file: File, jdFile: File | null = null): Promise<BackendResponse> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        status: 'success',
        errors: null,
        data: {
          // Mock CV data that would be returned from the backend parser
          firstName: 'John',
          surname: 'Doe',
          email: 'john.doe@example.com',
          phone: '+44 123 456 7890',
          links: [{ title: 'LinkedIn', url: 'https://linkedin.com/in/johndoe' }],
          location: { city: 'London', country: 'UK', postalCode: 'EC1A 1BB' },
          headline: 'Senior Software Developer',
          profileStatement: 'Senior Software Developer with 8+ years of experience in full-stack development, specializing in scalable web applications and cloud architecture.',
          skills: [
            { name: 'JavaScript', proficiency: 'Expert', skillType: 'hard' },
            { name: 'React', proficiency: 'Expert', skillType: 'hard' },
            { name: 'Node.js', proficiency: 'Advanced', skillType: 'hard' },
            { name: 'Team Leadership', proficiency: 'Advanced', skillType: 'soft' },
          ],
          achievements: [
            'Led development of cloud-native applications',
            'Managed team of 5 developers',
            'Reduced system latency by 40%'
          ],
          experience: [
            {
              company: 'Tech Company',
              title: 'Senior Developer',
              start: '2022-01',
              end: null,
              current: true,
              summary: 'Leading development of cloud applications',
              highlights: [
                'Led development of cloud-native applications',
                'Managed team of 5 developers'
              ]
            },
            {
              company: 'Digital Agency',
              title: 'Developer',
              start: '2019-03',
              end: '2021-12',
              current: false,
              summary: 'Full-stack development for client projects',
              highlights: [
                'Developed frontend for e-commerce platforms',
                'Implemented API integrations'
              ]
            }
          ],
          education: [
            {
              institution: 'University of Technology',
              location: { city: 'London', country: 'UK', postalCode: null },
              qualifications: [
                {
                  qualification: 'Bachelor\'s',
                  course: 'Computer Science',
                  start: '2015',
                  end: '2019',
                  grade: '2:1'
                }
              ]
            }
          ]
        }
      });
    }, 1500);
  });
}

export async function uploadJobDescription(file: File): Promise<BackendResponse> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        status: 'success',
        errors: null,
        data: {
          // Mock JD data
          title: 'Senior Software Developer',
          company: 'Tech Organization',
          description: 'We are looking for a Senior Software Developer with experience in React and Node.js...'
        }
      });
    }, 1000);
  });
}

export async function optimizeProfileStatement(cvId: string, jdId?: string): Promise<BackendResponse> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        status: 'success',
        errors: null,
        data: {
          originalText: 'Senior Software Developer with 8+ years of experience.',
          optimizedText: 'Results-driven Senior Software Developer with 8+ years of expertise in designing scalable cloud applications and leading development teams. Proven track record in reducing system latency by 40% through architecture optimization.',
          feedback: 'Added more specifics about achievements and technical strengths.'
        }
      });
    }, 2000);
  });
}

export async function optimizeSkills(cvId: string, jdId?: string): Promise<BackendResponse> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        status: 'success',
        errors: null,
        data: {
          originalSkills: [
            { name: 'JavaScript', proficiency: 'Expert', skillType: 'hard' },
            { name: 'React', proficiency: 'Expert', skillType: 'hard' },
            { name: 'Node.js', proficiency: 'Advanced', skillType: 'hard' },
          ],
          optimizedSkills: [
            { name: 'JavaScript', proficiency: 'Expert', skillType: 'hard' },
            { name: 'React', proficiency: 'Expert', skillType: 'hard' },
            { name: 'Node.js', proficiency: 'Advanced', skillType: 'hard' },
            { name: 'Cloud Architecture', proficiency: 'Advanced', skillType: 'hard' },
            { name: 'Team Leadership', proficiency: 'Advanced', skillType: 'soft' },
          ],
          feedback: 'Added Cloud Architecture based on experience description. Added Team Leadership as a soft skill.'
        }
      });
    }, 2000);
  });
}

export async function optimizeAchievements(cvId: string, jdId?: string): Promise<BackendResponse> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        status: 'success',
        errors: null,
        data: {
          originalAchievements: ['Led development', 'Managed team'],
          optimizedAchievements: [
            'Led development of enterprise-level cloud-native applications resulting in 30% faster deployment cycles',
            'Managed team of 5 developers, improving productivity by 25% through agile methodologies',
            'Reduced system latency by 40% through architecture optimization and code refactoring'
          ],
          feedback: 'Expanded achievements with specific metrics and outcomes.'
        }
      });
    }, 2000);
  });
}

export async function optimizeExperience(cvId: string, experienceIndex: number, jdId?: string): Promise<BackendResponse> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        status: 'success',
        errors: null,
        data: {
          originalExperience: {
            company: 'Tech Company',
            title: 'Senior Developer',
            highlights: [
              'Led development of cloud-native applications',
              'Managed team of 5 developers'
            ]
          },
          optimizedExperience: {
            company: 'Tech Company',
            title: 'Senior Developer',
            highlights: [
              'Led development of cloud-native applications, implementing microservices architecture that improved scalability by 200%',
              'Managed team of 5 developers, implementing agile methodologies that increased delivery speed by 30%',
              'Orchestrated migration to AWS cloud, reducing infrastructure costs by 25%'
            ]
          },
          feedback: 'Added specific metrics and technical details to highlight achievements.'
        }
      });
    }, 2000);
  });
}

export async function generateDocument(cv: CV, format: 'PDF' | 'DOCX', recruiterProfile: RecruiterProfile): Promise<string> {
  // Simulate API call to generate document
  return new Promise((resolve) => {
    setTimeout(() => {
      // In a real implementation, this would return a URL to the generated document
      resolve('https://example.com/documents/cv-12345.' + format.toLowerCase());
    }, 3000);
  });
}

export async function getRecruiterProfile(): Promise<RecruiterProfile> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        firstName: 'John',
        lastName: 'Smith',
        email: 'john.smith@agency.com',
        phone: '+44 123 456 7890',
        profilePicture: '/placeholder.svg',
        agencyName: 'Tech Recruiters Ltd',
        website: 'https://techrecruiters.com'
      });
    }, 1000);
  });
}

export async function updateRecruiterProfile(profile: RecruiterProfile): Promise<RecruiterProfile> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(profile);
    }, 1000);
  });
}

export async function getAppSettings(): Promise<AppSettings> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        defaultSectionVisibility: {
          personalInfo: true,
          profileStatement: true,
          skills: true,
          experience: true,
          education: true,
          certifications: true,
          achievements: true,
          languages: true,
          professionalMemberships: true,
          earlierCareer: false,
          publications: false,
          additionalDetails: false,
        },
        defaultSectionOrder: {
          sections: [
            'personalInfo',
            'profileStatement',
            'skills',
            'experience',
            'education',
            'achievements',
            'certifications',
            'languages',
            'professionalMemberships',
            'publications',
            'earlierCareer',
            'additionalDetails',
          ]
        },
        defaultAnonymize: false,
        keepOriginalFiles: true,
        defaultExportFormat: 'PDF'
      });
    }, 1000);
  });
}

export async function updateAppSettings(settings: AppSettings): Promise<AppSettings> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(settings);
    }, 1000);
  });
}



================================================
FILE: src/test/setup.ts
================================================
const dotenv = require('dotenv');
require('@testing-library/jest-dom');

// Load environment variables
dotenv.config();

// Set test timeout
jest.setTimeout(30000);

// Global setup
beforeAll(() => {
  // Add any global setup here
});

// Global cleanup
afterAll(() => {
  // Add any global cleanup here
}); 


================================================
FILE: src/types/cv.ts
================================================

export interface Link {
  title: string | null;
  url: string | null;
}

export interface Location {
  city: string | null;
  country: string | null;
  postalCode: string | null;
}

export interface Skill {
  name: string;
  proficiency: "Beginner" | "Average" | "Intermediate" | "Advanced" | "Expert";
  skillType: "hard" | "soft";
}

export interface Language {
  name: string;
  level: "Native" | "Fluent" | "Advanced" | "Intermediate" | "Basic" | null;
}

export interface Experience {
  company: string;
  title?: string;
  start: string | null;
  end: string | null;
  current: boolean;
  summary: string | null;
  highlights: string[] | null;
}

export interface Qualification {
  qualification: string | null;
  course: string;
  start: string | null;
  end: string | null;
  grade: string | null;
}

export interface Education {
  institution: string;
  location: Location | null;
  qualifications: Qualification[] | null;
}

export interface Certification {
  name: string;
  issuer: string | null;
  date: string | null;
}

export interface ProfessionalMembership {
  institution: string;
  name: string;
}

export interface Role {
  title: string;
  start: string | null;
  end: string | null;
}

export interface EarlierCareer {
  company: string;
  start: string | null;
  end: string | null;
  roles: Role[];
}

export interface Publication {
  pubType: string | null;
  title: string;
  date: string | null;
}

export interface CV {
  firstName: string | null;
  surname: string | null;
  email: string | null;
  phone: string | null;
  links: Link[] | null;
  location: Location | null;
  headline: string;
  profileStatement: string;
  skills: Skill[];
  achievements: string[];
  languages: Language[] | null;
  experience: Experience[];
  education: Education[] | null;
  certifications: Certification[] | null;
  professionalMemberships: ProfessionalMembership[] | null;
  earlierCareer: EarlierCareer[] | null;
  publications: Publication[] | null;
  addDetails: string[] | null;
}

export interface CVSectionVisibility {
  personalInfo: boolean;
  profileStatement: boolean;
  skills: boolean;
  experience: boolean;
  education: boolean;
  certifications: boolean;
  achievements: boolean;
  languages: boolean;
  professionalMemberships: boolean;
  earlierCareer: boolean;
  publications: boolean;
  additionalDetails: boolean;
}

export interface CVSectionOrder {
  sections: string[];
}

export interface RecruiterProfile {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  profilePicture?: string;
  agencyName: string;
  agencyLogo?: string;
  website?: string;
}

export interface AppSettings {
  defaultSectionVisibility: CVSectionVisibility;
  defaultSectionOrder: CVSectionOrder;
  defaultAnonymize: boolean;
  keepOriginalFiles: boolean;
  defaultExportFormat: "PDF" | "DOCX";
}

export interface BackendResponse {
  status: "success" | "error" | "partial";
  errors: string[] | null;
  data: any;
}



================================================
FILE: supabase/config.toml
================================================
project_id = "bvnglrtwcrysosinnnem"

[storage.buckets.cv_files]
public = false
file_size_limit = "10MiB"
allowed_mime_types = ["application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"]

[storage.buckets.company_logos]
public = true
file_size_limit = "5MiB"
allowed_mime_types = ["image/jpeg", "image/png", "image/svg+xml"]

[storage.buckets.generated_documents]
public = false
file_size_limit = "10MiB"
allowed_mime_types = ["application/pdf", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"]


================================================
FILE: supabase/migrations/20250331164650_remote_schema.sql
================================================



================================================
FILE: supabase/migrations/20250331164725_remote_schema.sql
================================================
create type "public"."analysis_task_type" as enum ('ps', 'cs', 'ka', 'role', 'scoring');

create type "public"."chat_sender_type" as enum ('user', 'assistant');

create type "public"."cv_status" as enum ('Uploaded', 'Parsing', 'Parsed', 'Optimizing_PS', 'Optimizing_CS', 'Optimizing_KA', 'Optimizing_Role', 'Scoring', 'OptimizationComplete', 'Generating', 'Generated', 'Error');

create sequence "public"."cv_chats_id_seq";

create table "public"."candidates" (
    "id" uuid not null default gen_random_uuid(),
    "first_name" text,
    "last_name" text,
    "current_position" text,
    "current_company" text,
    "owner_id" uuid,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."candidates" enable row level security;

create table "public"."companies" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null,
    "website" text,
    "address" text,
    "description" text,
    "brand_color" text,
    "logo_storage_path" text,
    "default_cv_template" text default 'professional'::text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."companies" enable row level security;

create table "public"."cv_analysis_results" (
    "id" uuid not null default gen_random_uuid(),
    "cv_id" uuid not null,
    "task_type" analysis_task_type not null,
    "result_data" jsonb,
    "model_used" text,
    "jd_storage_path" text,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."cv_analysis_results" enable row level security;

create table "public"."cv_chats" (
    "id" bigint not null default nextval('cv_chats_id_seq'::regclass),
    "cv_id" uuid not null,
    "user_id" uuid,
    "sender_type" chat_sender_type not null,
    "message_text" text not null,
    "timestamp" timestamp with time zone not null default now()
);


alter table "public"."cv_chats" enable row level security;

create table "public"."cvs" (
    "id" uuid not null default gen_random_uuid(),
    "candidate_id" uuid not null,
    "uploader_id" uuid not null,
    "original_file_storage_path" text,
    "original_filename" text,
    "parsed_data" jsonb,
    "status" cv_status not null default 'Uploaded'::cv_status,
    "error_message" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."cvs" enable row level security;

create table "public"."generated_documents" (
    "id" uuid not null default gen_random_uuid(),
    "cv_id" uuid not null,
    "generator_id" uuid not null,
    "generated_file_storage_path" text not null,
    "format" text not null,
    "template_style" text,
    "included_recruiter_branding" boolean,
    "included_cover_page" boolean,
    "client_logo_storage_path" text,
    "settings_snapshot" jsonb,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."generated_documents" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "first_name" text,
    "last_name" text,
    "email" text,
    "phone" text,
    "job_title" text,
    "bio" text,
    "company_id" uuid,
    "default_anonymize" boolean default false,
    "default_section_visibility" jsonb,
    "default_section_order" jsonb,
    "default_ai_model" text default 'balanced'::text,
    "auto_optimize_upload" boolean default true,
    "smart_keyword_detection" boolean default true,
    "grammar_correction" boolean default true,
    "custom_ai_instructions" text,
    "default_export_format" text default 'pdf'::text,
    "default_include_cover_page" boolean default false,
    "default_include_recruiter_details" boolean default true,
    "default_email_template" text,
    "email_notifications" boolean default true,
    "processing_notifications" boolean default true,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."profiles" enable row level security;

alter sequence "public"."cv_chats_id_seq" owned by "public"."cv_chats"."id";

CREATE UNIQUE INDEX candidates_pkey ON public.candidates USING btree (id);

CREATE UNIQUE INDEX companies_pkey ON public.companies USING btree (id);

CREATE UNIQUE INDEX cv_analysis_results_pkey ON public.cv_analysis_results USING btree (id);

CREATE UNIQUE INDEX cv_chats_pkey ON public.cv_chats USING btree (id);

CREATE UNIQUE INDEX cvs_pkey ON public.cvs USING btree (id);

CREATE UNIQUE INDEX generated_documents_pkey ON public.generated_documents USING btree (id);

CREATE INDEX idx_analysis_cv_id ON public.cv_analysis_results USING btree (cv_id);

CREATE INDEX idx_analysis_task_type ON public.cv_analysis_results USING btree (task_type);

CREATE INDEX idx_candidate_owner ON public.candidates USING btree (owner_id);

CREATE INDEX idx_chat_cv_id ON public.cv_chats USING btree (cv_id);

CREATE INDEX idx_chat_timestamp ON public.cv_chats USING btree ("timestamp");

CREATE INDEX idx_cv_candidate ON public.cvs USING btree (candidate_id);

CREATE INDEX idx_cv_status ON public.cvs USING btree (status);

CREATE INDEX idx_cv_uploader ON public.cvs USING btree (uploader_id);

CREATE INDEX idx_gen_doc_cv_id ON public.generated_documents USING btree (cv_id);

CREATE INDEX idx_gen_doc_generator_id ON public.generated_documents USING btree (generator_id);

CREATE INDEX idx_profile_company_id ON public.profiles USING btree (company_id);

CREATE INDEX idx_profile_email ON public.profiles USING btree (email);

CREATE UNIQUE INDEX profiles_email_key ON public.profiles USING btree (email);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

alter table "public"."candidates" add constraint "candidates_pkey" PRIMARY KEY using index "candidates_pkey";

alter table "public"."companies" add constraint "companies_pkey" PRIMARY KEY using index "companies_pkey";

alter table "public"."cv_analysis_results" add constraint "cv_analysis_results_pkey" PRIMARY KEY using index "cv_analysis_results_pkey";

alter table "public"."cv_chats" add constraint "cv_chats_pkey" PRIMARY KEY using index "cv_chats_pkey";

alter table "public"."cvs" add constraint "cvs_pkey" PRIMARY KEY using index "cvs_pkey";

alter table "public"."generated_documents" add constraint "generated_documents_pkey" PRIMARY KEY using index "generated_documents_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."candidates" add constraint "candidates_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) ON DELETE SET NULL not valid;

alter table "public"."candidates" validate constraint "candidates_owner_id_fkey";

alter table "public"."cv_analysis_results" add constraint "cv_analysis_results_cv_id_fkey" FOREIGN KEY (cv_id) REFERENCES cvs(id) ON DELETE CASCADE not valid;

alter table "public"."cv_analysis_results" validate constraint "cv_analysis_results_cv_id_fkey";

alter table "public"."cv_chats" add constraint "cv_chats_cv_id_fkey" FOREIGN KEY (cv_id) REFERENCES cvs(id) ON DELETE CASCADE not valid;

alter table "public"."cv_chats" validate constraint "cv_chats_cv_id_fkey";

alter table "public"."cv_chats" add constraint "cv_chats_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE SET NULL not valid;

alter table "public"."cv_chats" validate constraint "cv_chats_user_id_fkey";

alter table "public"."cvs" add constraint "cvs_candidate_id_fkey" FOREIGN KEY (candidate_id) REFERENCES candidates(id) ON DELETE CASCADE not valid;

alter table "public"."cvs" validate constraint "cvs_candidate_id_fkey";

alter table "public"."cvs" add constraint "cvs_uploader_id_fkey" FOREIGN KEY (uploader_id) REFERENCES auth.users(id) ON DELETE SET NULL not valid;

alter table "public"."cvs" validate constraint "cvs_uploader_id_fkey";

alter table "public"."generated_documents" add constraint "generated_documents_cv_id_fkey" FOREIGN KEY (cv_id) REFERENCES cvs(id) ON DELETE CASCADE not valid;

alter table "public"."generated_documents" validate constraint "generated_documents_cv_id_fkey";

alter table "public"."generated_documents" add constraint "generated_documents_format_check" CHECK ((format = ANY (ARRAY['pdf'::text, 'docx'::text]))) not valid;

alter table "public"."generated_documents" validate constraint "generated_documents_format_check";

alter table "public"."generated_documents" add constraint "generated_documents_generator_id_fkey" FOREIGN KEY (generator_id) REFERENCES auth.users(id) ON DELETE SET NULL not valid;

alter table "public"."generated_documents" validate constraint "generated_documents_generator_id_fkey";

alter table "public"."profiles" add constraint "profiles_company_id_fkey" FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE SET NULL not valid;

alter table "public"."profiles" validate constraint "profiles_company_id_fkey";

alter table "public"."profiles" add constraint "profiles_email_key" UNIQUE using index "profiles_email_key";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
BEGIN
  INSERT INTO public.profiles (id, email)
  VALUES (NEW.id, NEW.email);
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.trigger_set_timestamp()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."candidates" to "anon";

grant insert on table "public"."candidates" to "anon";

grant references on table "public"."candidates" to "anon";

grant select on table "public"."candidates" to "anon";

grant trigger on table "public"."candidates" to "anon";

grant truncate on table "public"."candidates" to "anon";

grant update on table "public"."candidates" to "anon";

grant delete on table "public"."candidates" to "authenticated";

grant insert on table "public"."candidates" to "authenticated";

grant references on table "public"."candidates" to "authenticated";

grant select on table "public"."candidates" to "authenticated";

grant trigger on table "public"."candidates" to "authenticated";

grant truncate on table "public"."candidates" to "authenticated";

grant update on table "public"."candidates" to "authenticated";

grant delete on table "public"."candidates" to "service_role";

grant insert on table "public"."candidates" to "service_role";

grant references on table "public"."candidates" to "service_role";

grant select on table "public"."candidates" to "service_role";

grant trigger on table "public"."candidates" to "service_role";

grant truncate on table "public"."candidates" to "service_role";

grant update on table "public"."candidates" to "service_role";

grant delete on table "public"."companies" to "anon";

grant insert on table "public"."companies" to "anon";

grant references on table "public"."companies" to "anon";

grant select on table "public"."companies" to "anon";

grant trigger on table "public"."companies" to "anon";

grant truncate on table "public"."companies" to "anon";

grant update on table "public"."companies" to "anon";

grant delete on table "public"."companies" to "authenticated";

grant insert on table "public"."companies" to "authenticated";

grant references on table "public"."companies" to "authenticated";

grant select on table "public"."companies" to "authenticated";

grant trigger on table "public"."companies" to "authenticated";

grant truncate on table "public"."companies" to "authenticated";

grant update on table "public"."companies" to "authenticated";

grant delete on table "public"."companies" to "service_role";

grant insert on table "public"."companies" to "service_role";

grant references on table "public"."companies" to "service_role";

grant select on table "public"."companies" to "service_role";

grant trigger on table "public"."companies" to "service_role";

grant truncate on table "public"."companies" to "service_role";

grant update on table "public"."companies" to "service_role";

grant delete on table "public"."cv_analysis_results" to "anon";

grant insert on table "public"."cv_analysis_results" to "anon";

grant references on table "public"."cv_analysis_results" to "anon";

grant select on table "public"."cv_analysis_results" to "anon";

grant trigger on table "public"."cv_analysis_results" to "anon";

grant truncate on table "public"."cv_analysis_results" to "anon";

grant update on table "public"."cv_analysis_results" to "anon";

grant delete on table "public"."cv_analysis_results" to "authenticated";

grant insert on table "public"."cv_analysis_results" to "authenticated";

grant references on table "public"."cv_analysis_results" to "authenticated";

grant select on table "public"."cv_analysis_results" to "authenticated";

grant trigger on table "public"."cv_analysis_results" to "authenticated";

grant truncate on table "public"."cv_analysis_results" to "authenticated";

grant update on table "public"."cv_analysis_results" to "authenticated";

grant delete on table "public"."cv_analysis_results" to "service_role";

grant insert on table "public"."cv_analysis_results" to "service_role";

grant references on table "public"."cv_analysis_results" to "service_role";

grant select on table "public"."cv_analysis_results" to "service_role";

grant trigger on table "public"."cv_analysis_results" to "service_role";

grant truncate on table "public"."cv_analysis_results" to "service_role";

grant update on table "public"."cv_analysis_results" to "service_role";

grant delete on table "public"."cv_chats" to "anon";

grant insert on table "public"."cv_chats" to "anon";

grant references on table "public"."cv_chats" to "anon";

grant select on table "public"."cv_chats" to "anon";

grant trigger on table "public"."cv_chats" to "anon";

grant truncate on table "public"."cv_chats" to "anon";

grant update on table "public"."cv_chats" to "anon";

grant delete on table "public"."cv_chats" to "authenticated";

grant insert on table "public"."cv_chats" to "authenticated";

grant references on table "public"."cv_chats" to "authenticated";

grant select on table "public"."cv_chats" to "authenticated";

grant trigger on table "public"."cv_chats" to "authenticated";

grant truncate on table "public"."cv_chats" to "authenticated";

grant update on table "public"."cv_chats" to "authenticated";

grant delete on table "public"."cv_chats" to "service_role";

grant insert on table "public"."cv_chats" to "service_role";

grant references on table "public"."cv_chats" to "service_role";

grant select on table "public"."cv_chats" to "service_role";

grant trigger on table "public"."cv_chats" to "service_role";

grant truncate on table "public"."cv_chats" to "service_role";

grant update on table "public"."cv_chats" to "service_role";

grant delete on table "public"."cvs" to "anon";

grant insert on table "public"."cvs" to "anon";

grant references on table "public"."cvs" to "anon";

grant select on table "public"."cvs" to "anon";

grant trigger on table "public"."cvs" to "anon";

grant truncate on table "public"."cvs" to "anon";

grant update on table "public"."cvs" to "anon";

grant delete on table "public"."cvs" to "authenticated";

grant insert on table "public"."cvs" to "authenticated";

grant references on table "public"."cvs" to "authenticated";

grant select on table "public"."cvs" to "authenticated";

grant trigger on table "public"."cvs" to "authenticated";

grant truncate on table "public"."cvs" to "authenticated";

grant update on table "public"."cvs" to "authenticated";

grant delete on table "public"."cvs" to "service_role";

grant insert on table "public"."cvs" to "service_role";

grant references on table "public"."cvs" to "service_role";

grant select on table "public"."cvs" to "service_role";

grant trigger on table "public"."cvs" to "service_role";

grant truncate on table "public"."cvs" to "service_role";

grant update on table "public"."cvs" to "service_role";

grant delete on table "public"."generated_documents" to "anon";

grant insert on table "public"."generated_documents" to "anon";

grant references on table "public"."generated_documents" to "anon";

grant select on table "public"."generated_documents" to "anon";

grant trigger on table "public"."generated_documents" to "anon";

grant truncate on table "public"."generated_documents" to "anon";

grant update on table "public"."generated_documents" to "anon";

grant delete on table "public"."generated_documents" to "authenticated";

grant insert on table "public"."generated_documents" to "authenticated";

grant references on table "public"."generated_documents" to "authenticated";

grant select on table "public"."generated_documents" to "authenticated";

grant trigger on table "public"."generated_documents" to "authenticated";

grant truncate on table "public"."generated_documents" to "authenticated";

grant update on table "public"."generated_documents" to "authenticated";

grant delete on table "public"."generated_documents" to "service_role";

grant insert on table "public"."generated_documents" to "service_role";

grant references on table "public"."generated_documents" to "service_role";

grant select on table "public"."generated_documents" to "service_role";

grant trigger on table "public"."generated_documents" to "service_role";

grant truncate on table "public"."generated_documents" to "service_role";

grant update on table "public"."generated_documents" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

create policy "Users can manage their own candidates."
on "public"."candidates"
as permissive
for all
to public
using ((auth.uid() = owner_id))
with check ((auth.uid() = owner_id));


create policy "Users can update their own company details."
on "public"."companies"
as permissive
for update
to public
using ((id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))))
with check ((id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))));


create policy "Users can view their own company details."
on "public"."companies"
as permissive
for select
to public
using ((id = ( SELECT profiles.company_id
   FROM profiles
  WHERE (profiles.id = auth.uid()))));


create policy "Users can manage analysis results for their CVs."
on "public"."cv_analysis_results"
as permissive
for all
to public
using ((cv_id IN ( SELECT cv.id
   FROM (cvs cv
     JOIN candidates c ON ((cv.candidate_id = c.id)))
  WHERE (c.owner_id = auth.uid()))));


create policy "Users can manage chats for their CVs."
on "public"."cv_chats"
as permissive
for all
to public
using ((cv_id IN ( SELECT cv.id
   FROM (cvs cv
     JOIN candidates c ON ((cv.candidate_id = c.id)))
  WHERE (c.owner_id = auth.uid()))))
with check (((user_id = auth.uid()) OR (sender_type = 'assistant'::chat_sender_type)));


create policy "Users can manage CVs for their candidates."
on "public"."cvs"
as permissive
for all
to public
using ((candidate_id IN ( SELECT c.id
   FROM candidates c
  WHERE (c.owner_id = auth.uid()))))
with check ((candidate_id IN ( SELECT c.id
   FROM candidates c
  WHERE (c.owner_id = auth.uid()))));


create policy "Users can manage generated documents for their CVs."
on "public"."generated_documents"
as permissive
for all
to public
using ((cv_id IN ( SELECT cv.id
   FROM (cvs cv
     JOIN candidates c ON ((cv.candidate_id = c.id)))
  WHERE (c.owner_id = auth.uid()))))
with check ((generator_id = auth.uid()));


create policy "Users can update their own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id))
with check ((auth.uid() = id));


create policy "Users can view their own profile."
on "public"."profiles"
as permissive
for select
to public
using ((auth.uid() = id));


CREATE TRIGGER set_candidates_timestamp BEFORE UPDATE ON public.candidates FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_companies_timestamp BEFORE UPDATE ON public.companies FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_cvs_timestamp BEFORE UPDATE ON public.cvs FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_profiles_timestamp BEFORE UPDATE ON public.profiles FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();





================================================
FILE: supabase/migrations/20250331165002_remote_schema.sql
================================================
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


drop trigger if exists "objects_delete_delete_prefix" on "storage"."objects";

drop trigger if exists "objects_insert_create_prefix" on "storage"."objects";

drop trigger if exists "objects_update_create_prefix" on "storage"."objects";

drop trigger if exists "prefixes_create_hierarchy" on "storage"."prefixes";

drop trigger if exists "prefixes_delete_hierarchy" on "storage"."prefixes";

revoke delete on table "storage"."prefixes" from "anon";

revoke insert on table "storage"."prefixes" from "anon";

revoke references on table "storage"."prefixes" from "anon";

revoke select on table "storage"."prefixes" from "anon";

revoke trigger on table "storage"."prefixes" from "anon";

revoke truncate on table "storage"."prefixes" from "anon";

revoke update on table "storage"."prefixes" from "anon";

revoke delete on table "storage"."prefixes" from "authenticated";

revoke insert on table "storage"."prefixes" from "authenticated";

revoke references on table "storage"."prefixes" from "authenticated";

revoke select on table "storage"."prefixes" from "authenticated";

revoke trigger on table "storage"."prefixes" from "authenticated";

revoke truncate on table "storage"."prefixes" from "authenticated";

revoke update on table "storage"."prefixes" from "authenticated";

revoke delete on table "storage"."prefixes" from "service_role";

revoke insert on table "storage"."prefixes" from "service_role";

revoke references on table "storage"."prefixes" from "service_role";

revoke select on table "storage"."prefixes" from "service_role";

revoke trigger on table "storage"."prefixes" from "service_role";

revoke truncate on table "storage"."prefixes" from "service_role";

revoke update on table "storage"."prefixes" from "service_role";

alter table "storage"."prefixes" drop constraint "prefixes_bucketId_fkey";

drop function if exists "storage"."add_prefixes"(_bucket_id text, _name text);

drop function if exists "storage"."delete_prefix"(_bucket_id text, _name text);

drop function if exists "storage"."delete_prefix_hierarchy_trigger"();

drop function if exists "storage"."get_level"(name text);

drop function if exists "storage"."get_prefix"(name text);

drop function if exists "storage"."get_prefixes"(name text);

drop function if exists "storage"."objects_insert_prefix_trigger"();

drop function if exists "storage"."prefixes_insert_trigger"();

drop function if exists "storage"."search_legacy_v1"(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text);

drop function if exists "storage"."search_v1_optimised"(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text);

drop function if exists "storage"."search_v2"(prefix text, bucket_name text, limits integer, levels integer, start_after text);

alter table "storage"."prefixes" drop constraint "prefixes_pkey";

drop index if exists "storage"."idx_name_bucket_unique";

drop index if exists "storage"."idx_objects_lower_name";

drop index if exists "storage"."idx_prefixes_lower_name";

drop index if exists "storage"."objects_bucket_id_level_idx";

drop index if exists "storage"."prefixes_pkey";

drop table "storage"."prefixes";

alter table "storage"."objects" drop column "level";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)
 RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
 LANGUAGE plpgsql
 STABLE
AS $function$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$function$
;




