# Cursor Rules for joe-hireable-cv-branding-buddy

## General Principles

* **Role:** You are an expert AI programming assistant specializing in clear, readable, and robust code for this project.
* **Accuracy:** Provide accurate, factual, and thoughtful answers. If you don't know or are unsure, state that instead of guessing.
* **Reasoning:** Think step-by-step before writing code. Briefly outline your plan or reasoning.
* **Completeness:** Fully implement requested functionality. Avoid TODOs, placeholders, or incomplete snippets. Ensure code is production-ready.
* **Readability:** Prioritize clear and maintainable code. Use meaningful names and consistent formatting.
* **Correctness:** Write correct, up-to-date, secure, performant, and efficient code.
* **Conciseness:** Minimize unnecessary prose. Focus on the code and essential explanations.
* **Requirements:** Follow user requirements carefully and precisely.

## Project Context & Tech Stack

* **Framework/UI:** React (Vite), TypeScript, Shadcn UI, Tailwind CSS.
* **State Management:** React Context API (`src/contexts/`) and React Query (`@tanstack/react-query`).
* **Routing:** React Router (`react-router-dom`).
* **API/Backend:** Supabase (`src/integrations/supabase/`) and a custom CV Parser API (`src/services/cvParserApi.ts` connecting to `https://europe-west9-hireable-places.cloudfunctions.net/cv_optimizer`).
* **Styling:** Tailwind CSS (`tailwind.config.ts`, `src/index.css`) with `clsx` and `tailwind-merge` (`src/lib/utils.ts`). Shadcn UI components are the primary UI building blocks (`src/components/ui/`).
* **Testing:** Jest and React Testing Library (`jest.config.mjs`, `src/setupTests.ts`).
* **Key Directories:**
    * `src/components/`: Reusable UI components.
    * `src/components/ui/`: Shadcn UI components.
    * `src/contexts/`: Global state management.
    * `src/hooks/`: Custom React hooks.
    * `src/integrations/supabase/`: Supabase client, types, services, utils.
    * `src/lib/`: Utility functions.
    * `src/pages/`: Top-level page components and routing structure.
    * `src/services/`: API interaction logic.
    * `src/types/`: TypeScript type definitions, especially `cv.ts`.
* **Build Tool:** Vite (`vite.config.ts`).

## Coding Guidelines

### TypeScript

* **Type Safety:** Use TypeScript strictly. Define clear interfaces and types (e.g., in `src/types/`). Utilize `React.FC` for functional components with props. Leverage utility types where appropriate.
* **Configuration:** Adhere to the project's TypeScript configurations (`tsconfig.json`, `tsconfig.app.json`, `tsconfig.node.json`). Be mindful of `strict` settings (currently `false` in `tsconfig.app.json` but `true` in `tsconfig.node.json`).

### React

* **Components:** Prefer functional components with Hooks (`useState`, `useEffect`, `useContext`, custom hooks from `src/hooks/`).
* **Props:** Define clear prop interfaces for components.
* **State Management:**
    * Use React Context (`useContext`) for global state (like Auth, CV, Recruiter, Settings data from `src/contexts/`).
    * Use React Query for server state management (fetching, caching, updating data from Supabase or the CV Parser API). Follow React Query best practices:
        * Use `QueryClient` and `QueryClientProvider` (as set up in `App.tsx`).
        * Implement custom hooks for specific queries and mutations (consider adding `src/hooks/useQueries` and `src/hooks/useMutations` directories if complexity grows).
        * Utilize meaningful query keys for effective caching and invalidation.
        * Implement proper error handling and loading states in UI components consuming queries/mutations.
        * Use query invalidation for data refetching after mutations.
* **Routing:** Use `react-router-dom` components (`BrowserRouter`, `Routes`, `Route`, `Link`, `useNavigate`, etc.) for navigation as seen in `App.tsx`. Implement protected routes using `ProtectedRoute` (`src/components/ProtectedRoute.tsx`) and the `AuthContext`.

### Styling

* **Tailwind CSS:** Use Tailwind CSS utility classes for styling. Refer to `tailwind.config.ts` for theme customizations (colors like `hireable-primary`, `hireable-gradient`, custom keyframes/animations).
* **Shadcn UI:** Leverage components from `src/components/ui/` whenever possible. Use `cn` utility (`src/lib/utils.ts`) for merging class names.
* **CSS:** Use CSS files (`src/index.css`, `src/App.css`) primarily for base styles, global styles, or complex layouts not easily achieved with Tailwind alone.

### API Interaction

* **Supabase:** Use the Supabase client (`src/integrations/supabase/client.ts`) and defined service functions (`src/integrations/supabase/services/`) for database and auth operations. Use types from `src/integrations/supabase/types.ts`. Implement proper error handling (`src/integrations/supabase/utils/error-handler.ts`).
* **CV Parser API:** Use the `axios` instance and service functions defined in `src/services/cvParserApi.ts`. Handle responses and errors appropriately, expecting data structures defined in `src/types/cv.ts` (like `BackendResponse`).

### Component Generation Workflow

1.  **Analyze:** Understand the required component's purpose, functionality, and design.
2.  **Check Existence:** Look for similar existing components in `src/components/` and `src/components/ui/`.
3.  **Prompt (If Necessary):** If no suitable component exists, formulate a detailed request specifying:
    * Component name and purpose.
    * Required props and their TypeScript types.
    * Styling requirements (mention using Tailwind CSS and potentially Shadcn UI).
    * Behavior and state management needs.
4.  **Adapt:** Integrate the generated component:
    * Place it in the correct directory (`src/components/` or a subdirectory).
    * Ensure imports use project aliases (`@/components/ui/...`, `@/lib/...`, `@/hooks/...`, etc.).
    * Verify it matches project patterns and conventions.
    * Add necessary state logic, context usage, or API calls.

### Testing

* Write unit and integration tests using Jest and React Testing Library.
* Follow configurations in `jest.config.mjs` and `src/setupTests.ts`.
* Aim for reasonable test coverage, focusing on critical paths and logic.

### Imports and Naming

* Use project path aliases (`@/*`) as defined in `tsconfig.json`.
* Follow consistent naming conventions for files, components, variables, functions, and types (e.g., PascalCase for components and types, camelCase for variables and functions).
* Include all necessary imports. Keep imports organized.

### Other

* **Dependencies:** Use existing libraries listed in `package.json` where appropriate (e.g., `react-hook-form`, `zod`, `date-fns`, `react-dnd`).
* **Environment Variables:** Be aware of environment variables used (`.env.test`, `vite.config.ts`, `src/middleware.ts`), especially for Supabase configuration and API URLs. Do not hardcode sensitive information.