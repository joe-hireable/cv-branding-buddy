# CV Branding Buddy - Session Rules

## Project Context

* **Project Purpose:** A tool for enhancing and optimizing CVs/resumes based on AI analysis and branding best practices.
* **Tech Stack:** React (Vite), TypeScript, Shadcn UI, Tailwind CSS, React Query, Supabase, CV Parser API.

## Code Standards & Patterns

### TypeScript & Type Safety
* Use TypeScript strictly with proper interfaces and types.
* Define explicit return types for all functions, especially API handlers.
* Use zod or pydantic for runtime validation of API responses and form inputs.
* Prefer interfaces for components props and explicit typing for state.
* Use discriminated unions for complex state management.

### Component Architecture
* Follow component-driven development principles.
* Organize components hierarchically - pages -> features -> UI components.
* Keep components focused on a single responsibility.
* Use composition over inheritance for component reusability.
* Extract complex logic into custom hooks with descriptive names.

### State Management
* Use React Query for server state (Supabase and CV Parser API requests).
* Implement optimistic updates where appropriate for better UX.
* Use Context API for global app state (authentication, preferences, etc.).
* Prefer immutable state updates with spread operators or immer.
* Implement proper loading, error, and success states for async operations.

### Styling Approach
* Use Tailwind CSS utility classes directly in components.
* Follow the project's established color scheme and design system.
* Use the cn utility (tailwind-merge + clsx) for conditional classes.
* Leverage Shadcn UI components as the foundation of the UI.
* Ensure all UI is responsive and works on mobile devices.

### Performance Considerations
* Implement proper code-splitting with React.lazy() and Suspense.
* Optimize images with appropriate formats and lazy loading.
* Minimize component re-renders with useMemo, useCallback, and memo.
* Use virtualization for long lists of CVs or sections.
* Implement proper caching strategies for API requests.

### Testing Strategy
* Write unit tests for critical business logic and utilities.
* Create integration tests for key user flows.
* Mock external dependencies (Supabase, CV Parser API) in tests.
* Use React Testing Library for component testing with user-centric assertions.
* Prefer testing behavior over implementation details.

## Front-End Architecture Focus

### CV Processing Flow
* Implement a clear, step-by-step flow for CV uploads, parsing, and enhancement.
* Provide visual feedback during processing stages.
* Handle errors gracefully with user-friendly messages.
* Store processing history for user reference.
* Implement proper validation for CV file uploads.

### User Experience Priorities
* Prioritize responsive design for all screen sizes.
* Implement accessibility best practices (ARIA attributes, keyboard navigation).
* Provide clear feedback for user actions.
* Use skeleton loaders during data fetching.
* Implement proper form validation with helpful error messages.

### API Integration
* Use React Query for all API calls with proper caching and refetching.
* Handle API errors gracefully and provide user-friendly error messages.
* Implement proper loading states during API calls.
* Structure API service functions in a modular, reusable way.
* Use TypeScript to ensure API response typing.

## Session-Specific Focus

* Pay special attention to CV parsing algorithm integration.
* Focus on optimizing data flow between CV parser API and UI components.
* Structure components to allow for future branding/customization features.
* Implement proper error handling for CV parsing edge cases.
* Consider UX improvements for the CV enhancement workflow.

## Code Quality & Development Process

* Follow consistent naming conventions across the codebase.
* Write clear, concise comments for complex logic.
* Use meaningful commit messages following conventional commits format.
* Break complex tasks into smaller, manageable PRs.
* Document new components and features for team reference.